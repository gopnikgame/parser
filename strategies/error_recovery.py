# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from typing import Dict, List, Callable, Optional

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
from core.config import ParserConfig

class SmartErrorRecovery:
    """–°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
        self.error_patterns = {
            'cloudflare_protection': [
                'cloudflare', 'checking your browser', 'security check',
                'ddos protection', 'bot protection'
            ],
            'rate_limiting': [
                'too many requests', 'rate limit', 'slow down',
                'temporarily blocked', 'throttled'
            ],
            'page_not_loaded': [
                'no data available', 'loading', 'please wait',
                'still loading', 'fetching data'
            ],
            'network_error': [
                'network error', 'connection timeout', 'failed to load',
                'dns error', 'connection refused'
            ],
            'javascript_error': [
                'script error', 'uncaught', 'undefined is not a function',
                'cannot read property', 'vue is not defined'
            ]
        }
        
        self.recovery_stats = {
            'total_errors': 0,
            'successful_recoveries': 0,
            'failed_recoveries': 0,
            'recovery_methods_used': {}
        }
    
    def handle_error(self, error: Exception, context: str = "") -> bool:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        self.recovery_stats['total_errors'] += 1
        
        error_text = str(error).lower()
        error_type = self._classify_error(error_text)
        
        print(f"üõ†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_type}': {error}")
        
        recovery_strategies = {
            'cloudflare_protection': self._handle_cloudflare,
            'rate_limiting': self._handle_rate_limit,
            'page_not_loaded': self._handle_page_reload,
            'network_error': self._handle_network_error,
            'javascript_error': self._handle_javascript_error,
            'unknown': self._handle_generic_error
        }
        
        strategy = recovery_strategies.get(error_type, recovery_strategies['unknown'])
        
        try:
            success = strategy(context, error_text)
            
            if success:
                self.recovery_stats['successful_recoveries'] += 1
                method_name = strategy.__name__
                self.recovery_stats['recovery_methods_used'][method_name] = \
                    self.recovery_stats['recovery_methods_used'].get(method_name, 0) + 1
            else:
                self.recovery_stats['failed_recoveries'] += 1
                
            return success
            
        except Exception as recovery_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_error}")
            self.recovery_stats['failed_recoveries'] += 1
            return False
    
    def _classify_error(self, error_text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        for error_type, patterns in self.error_patterns.items():
            if any(pattern in error_text for pattern in patterns):
                return error_type
        return 'unknown'
    
    def _handle_cloudflare(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Cloudflare –∑–∞—â–∏—Ç—ã"""
        print("üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Cloudflare –∑–∞—â–∏—Ç–∞...")
        
        try:
            # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            wait_time = random.uniform(15, 30)
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            time.sleep(wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
            if self._check_page_accessibility():
                print("‚úÖ Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∞ - –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.driver.refresh()
            time.sleep(random.uniform(10, 20))
            
            return self._check_page_accessibility()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Cloudflare: {e}")
            return False
    
    def _handle_rate_limit(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        print("‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏...")
        
        try:
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            wait_time = random.uniform(30, 90)
            print(f"‚è≥ –ü–∞—É–∑–∞ {wait_time:.1f}—Å –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
            time.sleep(wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            return self._check_page_accessibility()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limit: {e}")
            return False
    
    def _handle_page_reload(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        reload_strategies = [
            self._soft_reload,
            self._hard_reload, 
            self._navigate_fresh,
            self._clear_cache_reload
        ]
        
        for strategy in reload_strategies:
            try:
                print(f"üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy.__name__}")
                
                if strategy():
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
                    if self._wait_for_page_ready():
                        return True
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.__name__} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        return False
    
    def _handle_network_error(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        print("üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not self._check_internet_connection():
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                return False
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            current_url = self.driver.current_url
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            time.sleep(random.uniform(10, 20))
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ
            self.driver.get(current_url)
            
            return self._wait_for_page_ready()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _handle_javascript_error(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript –æ—à–∏–±–æ–∫"""
        print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript –æ—à–∏–±–∫–∏...")
        
        try:
            # –û—á–∏—â–∞–µ–º console errors
            try:
                self.driver.get_log('browser')
            except:
                pass
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è JS
            self.driver.refresh()
            