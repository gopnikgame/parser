# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from typing import Dict, List, Callable, Optional

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    from ..core.config import ParserConfig
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from core.config import ParserConfig

class SmartErrorRecovery:
    """–°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
        self.error_patterns = {
            'cloudflare_protection': ['cloudflare', 'checking your browser', 'security check'],
            'rate_limiting': ['too many requests', 'rate limit', 'slow down'],
            'page_not_loaded': ['no data available', 'loading', 'please wait'],
            'network_error': ['network error', 'connection timeout', 'failed to load'],
            'javascript_error': ['script error', 'uncaught', 'undefined is not a function']
        }
        
        self.recovery_stats = {
            'total_errors': 0,
            'successful_recoveries': 0,
            'failed_recoveries': 0,
            'recovery_methods_used': {}
        }
    
    def handle_error(self, error: Exception, context: str = "") -> bool:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        self.recovery_stats['total_errors'] += 1
        
        error_text = str(error).lower()
        error_type = self._classify_error(error_text)
        
        print(f"üõ†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_type}': {error}")
        
        recovery_strategies = {
            'cloudflare_protection': self._handle_cloudflare,
            'rate_limiting': self._handle_rate_limit,
            'page_not_loaded': self._handle_page_reload,
            'network_error': self._handle_network_error,
            'javascript_error': self._handle_javascript_error,
            'unknown': self._handle_generic_error
        }
        
        strategy = recovery_strategies.get(error_type, recovery_strategies['unknown'])
        
        try:
            success = strategy(context, error_text)
            
            if success:
                self.recovery_stats['successful_recoveries'] += 1
                method_name = strategy.__name__
                self.recovery_stats['recovery_methods_used'][method_name] = \
                    self.recovery_stats['recovery_methods_used'].get(method_name, 0) + 1
            else:
                self.recovery_stats['failed_recoveries'] += 1
                
            return success
            
        except Exception as recovery_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_error}")
            self.recovery_stats['failed_recoveries'] += 1
            return False
    
    def _classify_error(self, error_text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        for error_type, patterns in self.error_patterns.items():
            if any(pattern in error_text for pattern in patterns):
                return error_type
        return 'unknown'
    
    def _handle_cloudflare(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Cloudflare –∑–∞—â–∏—Ç—ã"""
        print("üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Cloudflare –∑–∞—â–∏—Ç–∞...")
        
        try:
            wait_time = random.uniform(15, 30)
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            time.sleep(wait_time)
            
            if self._check_page_accessibility():
                print("‚úÖ Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return True
            
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.driver.refresh()
            time.sleep(random.uniform(10, 20))
            
            return self._check_page_accessibility()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Cloudflare: {e}")
            return False
    
    def _handle_rate_limit(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        print("‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏...")
        
        try:
            wait_time = random.uniform(30, 90)
            print(f"‚è≥ –ü–∞—É–∑–∞ {wait_time:.1f}—Å –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
            time.sleep(wait_time)
            
            return self._check_page_accessibility()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limit: {e}")
            return False
    
    def _handle_page_reload(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        try:
            self.driver.refresh()
            time.sleep(random.uniform(5, 10))
            return self._wait_for_page_ready()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def _handle_network_error(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        print("üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏...")
        
        try:
            current_url = self.driver.current_url
            time.sleep(random.uniform(10, 20))
            self.driver.get(current_url)
            return self._wait_for_page_ready()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _handle_javascript_error(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript –æ—à–∏–±–æ–∫"""
        print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript –æ—à–∏–±–∫–∏...")
        
        try:
            self.driver.refresh()
            time.sleep(random.uniform(5, 10))
            return self._wait_for_page_ready()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JavaScript –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _handle_generic_error(self, context: str, error_text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
        print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏...")
        
        try:
            time.sleep(random.uniform(5, 15))
            self.driver.refresh()
            return self._wait_for_page_ready()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _check_page_accessibility(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            WebDriverWait(self.driver, 10).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            page_text = self.driver.page_source.lower()
            blocking_patterns = ['cloudflare', 'checking your browser', 'security check']
            
            return not any(pattern in page_text for pattern in blocking_patterns)
            
        except Exception:
            return False
    
    def _wait_for_page_ready(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            WebDriverWait(self.driver, self.config.PAGE_TIMEOUT).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            time.sleep(random.uniform(2, 5))
            
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                return True
            except TimeoutException:
                return False
                
        except Exception:
            return False
    
    def get_recovery_stats(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        stats = self.recovery_stats.copy()
        if stats['total_errors'] > 0:
            stats['success_rate'] = (stats['successful_recoveries'] / stats['total_errors']) * 100
        else:
            stats['success_rate'] = 0
        return stats
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.recovery_stats = {
            'total_errors': 0,
            'successful_recoveries': 0,
            'failed_recoveries': 0,
            'recovery_methods_used': {}
        }