# –ó–∞–¥–∞—á–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ https://dnscrypt.info/public-servers
# –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ GitHub
# –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å IPv4 –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ DNSCrypt/DNSCrypt relay

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
import re
import time
import subprocess
import urllib.request
import os

def get_default_chrome_options():
    """–ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ Chrome —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Selenium"""
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    return options

def kill_existing_chrome():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        subprocess.run(['pkill', '-f', 'chrome'], check=False)
        subprocess.run(['pkill', '-f', 'chromium'], check=False)
        time.sleep(2)
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome: {e}")

def download_file(url, filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å GitHub"""
    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {filename} —Å GitHub...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GitHub URL –≤ raw URL
        raw_url = url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/')
        
        urllib.request.urlretrieve(raw_url, filename)
        print(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
        return False

def parse_config_file(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = []
    current_country = None
    current_city = None
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line or line.startswith('#'):
                continue
                
            # –°—Ç—Ä–∞–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            if line.startswith('[') and line.endswith(']'):
                current_country = line[1:-1]
                current_city = None
                continue
                
            # –ì–æ—Ä–æ–¥ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            if line.startswith('"') and line.endswith('"'):
                current_city = line[1:-1]
                continue
                
            # –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å [ –∏–ª–∏ ")
            if not line.startswith('[') and not line.startswith('"') and current_country:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏)
                server_name = line.split()[0] if line.split() else line
                
                servers.append({
                    'name': server_name,
                    'country': current_country,
                    'city': current_city,
                    'original_line': line
                })
                
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ {filename}")
        return servers
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filename}: {e}")
        return []

def setup_driver():
    """–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome"""
    kill_existing_chrome()
    
    try:
        options = get_default_chrome_options()
        options.add_argument("--disable-dev-shm-usage") 
        options.add_argument("--disable-extensions")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--headless")  # –í–∫–ª—é—á–∞–µ–º headless —Ä–µ–∂–∏–º
        
        driver = webdriver.Chrome(options=options)
        print("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return driver
        
    except WebDriverException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {str(e)}")
        return None

def wait_for_page_load(driver, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
    except TimeoutException:
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return False

def expand_all_rows(driver):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        print("üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏...")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        pagination_selectors = [
            "//div[contains(text(), 'Rows per page')]//following::div[contains(@class, 'v-select')]",
            "//div[contains(@class, 'v-data-table__pagination')]//div[contains(@class, 'v-select')]",
            "//*[contains(text(), '50')]//parent::div[contains(@class, 'v-select')]",
            "//div[@role='combobox']"
        ]
        
        for selector in pagination_selectors:
            try:
                dropdown = WebDriverWait(driver, 3).until(
                    EC.element_to_be_clickable((By.XPATH, selector))
                )
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω dropdown: {selector}")
                dropdown.click()
                time.sleep(2)
                
                # –ò—â–µ–º –æ–ø—Ü–∏—é "All"
                all_options = [
                    "//div[contains(text(), 'All')]",
                    "//*[text()='All']",
                    "//div[contains(@class, 'v-list-item')]//div[contains(text(), 'All')]"
                ]
                
                for option_selector in all_options:
                    try:
                        all_option = WebDriverWait(driver, 2).until(
                            EC.element_to_be_clickable((By.XPATH, option_selector))
                        )
                        all_option.click()
                        print("‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è 'All'")
                        time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                        return True
                    except TimeoutException:
                        continue
                
            except TimeoutException:
                continue
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        return False
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏: {e}")
        return False

def close_any_overlays(driver):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ª—é–±—ã—Ö overlay/–º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"""
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å overlay
        overlays = [
            "//div[contains(@class, 'v-overlay')]",
            "//div[contains(@class, 'v-dialog')]",
            "//div[contains(@class, 'modal')]"
        ]
        
        for overlay_selector in overlays:
            try:
                overlays_elements = driver.find_elements(By.XPATH, overlay_selector)
                for overlay in overlays_elements:
                    if overlay.is_displayed():
                        # –ü—Ä–æ–±—É–µ–º ESC
                        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
                        time.sleep(1)
                        
                        # –ï—Å–ª–∏ overlay –≤—Å–µ –µ—â–µ –µ—Å—Ç—å, –∫–ª–∏–∫–∞–µ–º –≤–Ω–µ –µ–≥–æ
                        if overlay.is_displayed():
                            driver.execute_script("arguments[0].click();", overlay)
                            time.sleep(1)
                        break
            except:
                continue
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è overlay: {e}")

def find_server_element(driver, server_name):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª—é–±—ã–µ overlay –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        close_any_overlays(driver)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
        search_strategies = [
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ span
            f"//span[text()='{server_name}']",
            f"//span[contains(text(), '{server_name}')]",
            
            # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
            f"//td[text()='{server_name}']",
            f"//td[contains(text(), '{server_name}')]",
            
            # –ü–æ–∏—Å–∫ –≤ —Å—Å—ã–ª–∫–∞—Ö
            f"//a[text()='{server_name}']", 
            f"//a[contains(text(), '{server_name}')]",
            
            # –ü–æ–∏—Å–∫ –≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            f"//*[text()='{server_name}']",
            f"//*[contains(text(), '{server_name}')]",
            
            # –ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
            f"//tr[.//span[contains(text(), '{server_name}')]]//span[contains(text(), '{server_name}')]",
            f"//table//span[contains(text(), '{server_name}')]"
        ]
        
        for i, strategy in enumerate(search_strategies):
            try:
                elements = driver.find_elements(By.XPATH, strategy)
                
                for element in elements:
                    if element.is_displayed() and element.is_enabled():
                        return element
                        
            except Exception as e:
                continue
        
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def click_server_and_get_dialog(driver, server_element, server_name):
    """–ö–ª–∏–∫ –ø–æ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º overlay –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
        close_any_overlays(driver)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", server_element)
        time.sleep(2)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
        click_methods = [
            lambda: server_element.click(),
            lambda: ActionChains(driver).move_to_element(server_element).click().perform(),
            lambda: driver.execute_script("arguments[0].click();", server_element),
            lambda: ActionChains(driver).move_to_element(server_element).pause(1).click().perform()
        ]
        
        for i, click_method in enumerate(click_methods):
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç overlay
                close_any_overlays(driver)
                
                click_method()
                time.sleep(3)
                
                # –ò—â–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                dialog_selectors = [
                    "//div[contains(@class, 'v-dialog') and @role='dialog']",
                    "//div[contains(@class, 'v-dialog')]",
                    "//div[contains(@class, 'v-card')]", 
                    "//div[contains(@class, 'modal')]",
                    "//*[contains(@class, 'dialog')]",
                    "//div[@role='dialog']"
                ]
                
                for selector in dialog_selectors:
                    try:
                        dialogs = driver.find_elements(By.XPATH, selector)
                        for dialog in dialogs:
                            if dialog.is_displayed() and dialog.text.strip():
                                return dialog
                    except:
                        continue
                        
            except Exception as e:
                continue
        
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
        return None

def extract_dialog_info(driver, dialog):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        time.sleep(2)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        dialog_text = ""
        
        # –°–ø–æ—Å–æ–± 1: –æ–±—ã—á–Ω—ã–π text
        if dialog.text.strip():
            dialog_text = dialog.text
        
        # –°–ø–æ—Å–æ–± 2: innerHTML —á–µ—Ä–µ–∑ JavaScript
        if not dialog_text.strip():
            dialog_text = driver.execute_script("return arguments[0].innerHTML;", dialog)
        
        # –°–ø–æ—Å–æ–± 3: textContent —á–µ—Ä–µ–∑ JavaScript
        if not dialog_text.strip():
            dialog_text = driver.execute_script("return arguments[0].textContent;", dialog)
        
        # –°–ø–æ—Å–æ–± 4: –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
        if not dialog_text.strip():
            try:
                inner_elements = dialog.find_elements(By.XPATH, ".//*[text()]")
                texts = [elem.text for elem in inner_elements if elem.text.strip()]
                dialog_text = "\n".join(texts)
            except:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        try:
            # ESC
            driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
            time.sleep(1)
        except:
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            try:
                close_buttons = dialog.find_elements(By.XPATH, ".//button | .//i[@class*='close'] | .//*[@aria-label='close']")
                if close_buttons:
                    close_buttons[0].click()
                    time.sleep(1)
            except:
                pass
        
        return dialog_text if dialog_text.strip() else None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        return None

def parse_server_info(dialog_text, server_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    info = {
        'name': server_name,
        'ip': None,
        'protocol': None,
        'dnssec': False,
        'no_filters': False,
        'no_logs': False
    }
    
    if not dialog_text:
        return info
    
    # –ò—â–µ–º IP –∞–¥—Ä–µ—Å
    ip_patterns = [
        r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'Address[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'IP[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    ]
    
    for pattern in ip_patterns:
        matches = re.findall(pattern, dialog_text)
        for ip in matches:
            octets = ip.split('.')
            if all(0 <= int(octet) <= 255 for octet in octets):
                info['ip'] = ip
                break
        if info['ip']:
            break
    
    # –ò—â–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    if 'DNSCrypt relay' in dialog_text:
        info['protocol'] = 'DNSCrypt relay'
    elif 'DNSCrypt' in dialog_text:
        info['protocol'] = 'DNSCrypt'
    elif 'DoH' in dialog_text:
        info['protocol'] = 'DoH'
    
    # –ò—â–µ–º —Ñ–ª–∞–≥–∏
    text_lower = dialog_text.lower()
    info['dnssec'] = 'dnssec' in text_lower and 'true' in text_lower
    info['no_filters'] = 'no filter' in text_lower and 'true' in text_lower
    info['no_logs'] = 'no log' in text_lower and 'true' in text_lower
    
    return info

def format_relay_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–ª–µ—è"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} Anonymized DNS relay | {protocol} | {ip}"

def format_server_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    no_filter = "no filter" if server_info['no_filters'] else "filter"
    no_logs = "no logs" if server_info['no_logs'] else "logs"
    dnssec = "DNSSEC" if server_info['dnssec'] else "-----"
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} {no_filter} | {no_logs} | {dnssec} | IPv4 server | {protocol} | {ip}"

def update_config_file(filename, servers_data, is_relay_file=False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª {filename}...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        updated_lines = []
        updated_count = 0
        
        for line in lines:
            original_line = line.rstrip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
            if (not original_line or original_line.startswith('#') or 
                (original_line.startswith('[') and original_line.endswith(']')) or
                (original_line.startswith('"') and original_line.endswith('"'))):
                updated_lines.append(line)
                continue
            
            # –ò—â–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
            server_name = original_line.split()[0] if original_line.split() else ""
            
            if server_name in servers_data:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if is_relay_file:
                    new_line = format_relay_line(servers_data[server_name])
                else:
                    new_line = format_server_line(servers_data[server_name])
                
                if new_line:
                    updated_lines.append(new_line + '\n')
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {server_name} -> {servers_data[server_name]['ip']}")
                else:
                    updated_lines.append(line)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                updated_lines.append(line)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_filename = f"{filename}.backup"
        with open(backup_filename, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.writelines(updated_lines)
        
        print(f"‚úÖ –§–∞–π–ª {filename} –æ–±–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename}")
        
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return 0

def process_servers(driver, servers, file_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ ({file_type})...")
    
    servers_data = {}
    successful_count = 0
    
    for i, server in enumerate(servers, 1):
        print(f"\n[{i}/{len(servers)}] {server['name']}", end=" ")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä–∞
        server_element = find_server_element(driver, server['name'])
        if server_element:
            print("‚úì", end=" ")
            
            # –ö–ª–∏–∫–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog = click_server_and_get_dialog(driver, server_element, server['name'])
            if dialog:
                print("üîç", end=" ")
                
                dialog_text = extract_dialog_info(driver, dialog)
                if dialog_text:
                    info = parse_server_info(dialog_text, server['name'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                    expected_protocol = 'DNSCrypt relay' if file_type == 'relay' else 'DNSCrypt'
                    
                    if info['ip'] and info['protocol'] == expected_protocol:
                        servers_data[server['name']] = info
                        successful_count += 1
                        print(f"‚úÖ -> {info['ip']}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {info['protocol']}")
                else:
                    print("‚ùå –ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥")
            else:
                print("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ—Ä–≤–µ—Ä–æ–≤
        if i % 10 == 0:
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å {file_type}: {i}/{len(servers)} ({successful_count} —É—Å–ø–µ—à–Ω—ã—Ö)")
    
    return servers_data, successful_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 60)
    
    # URLs —Ñ–∞–π–ª–æ–≤ –Ω–∞ GitHub
    github_urls = {
        'DNSCrypt_relay.txt': 'https://github.com/gopnikgame/Installer_dnscypt/blob/main/lib/DNSCrypt_relay.txt',
        'DNSCrypt_servers.txt': 'https://github.com/gopnikgame/Installer_dnscypt/blob/main/lib/DNSCrypt_servers.txt'
    }
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
    print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å GitHub...")
    for filename, url in github_urls.items():
        if not download_file(url, filename):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    print("\nüìã –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    relay_servers = parse_config_file('DNSCrypt_relay.txt')
    dnscrypt_servers = parse_config_file('DNSCrypt_servers.txt')
    
    if not relay_servers and not dnscrypt_servers:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–µ–≤: {len(relay_servers)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver = setup_driver()
    if not driver:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        return
    
    try:
        print("\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É dnscrypt.info...")
        driver.get("https://dnscrypt.info/public-servers")
        
        if not wait_for_page_load(driver):
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π...")
        
        time.sleep(5)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        expand_all_rows(driver)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–∏
        relay_data = {}
        relay_successful = 0
        if relay_servers:
            relay_data, relay_successful = process_servers(driver, relay_servers, 'relay')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        server_data = {}
        server_successful = 0
        if dnscrypt_servers:
            server_data, server_successful = process_servers(driver, dnscrypt_servers, 'server')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_processed = len(relay_servers) + len(dnscrypt_servers)
        total_successful = relay_successful + server_successful
        
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print('='*60)
        print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
        print(f"  - –†–µ–ª–µ–µ–≤: {len(relay_servers)} (—É—Å–ø–µ—à–Ω–æ: {relay_successful})")
        print(f"  - –°–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)} (—É—Å–ø–µ—à–Ω–æ: {server_successful})")
        print(f"–û–±—â–∏–π —É—Å–ø–µ—Ö: {total_successful}/{total_processed}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        total_updated = 0
        
        if relay_data:
            print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–ª–µ–µ–≤...")
            updated_count = update_config_file('DNSCrypt_relay.txt', relay_data, is_relay_file=True)
            total_updated += updated_count
        
        if server_data:
            print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            updated_count = update_config_file('DNSCrypt_servers.txt', server_data, is_relay_file=False)
            total_updated += updated_count
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        if total_updated > 0:
            with open("update_report.txt", "w", encoding="utf-8") as f:
                f.write("# –û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤\n")
                f.write(f"# –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}\n\n")
                
                if relay_data:
                    f.write("–†–ï–õ–ï–ò:\n")
                    for name, info in relay_data.items():
                        f.write(f"{name:<30} -> {info['ip']} ({info['protocol']})\n")
                    f.write("\n")
                
                if server_data:
                    f.write("–°–ï–†–í–ï–†–´:\n")
                    for name, info in server_data.items():
                        f.write(f"{name:<30} -> {info['ip']} ({info['protocol']})\n")
            
            print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ update_report.txt")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        try:
            driver.quit()
            print("\nüö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass
        
        kill_existing_chrome()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for filename in github_urls.keys():
            try:
                if os.path.exists(filename):
                    os.remove(filename)
            except:
                pass
        
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()