#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
"""

import sys
import os
from pathlib import Path

def test_module_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ú–û–î–£–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    current_dir = Path(__file__).parent.absolute()
    sys.path.insert(0, str(current_dir))
    
    modules_to_test = [
        ("core", ["DNSCryptParser", "SmartDriverManager", "ParserConfig"]),
        ("extractors", ["AdvancedDialogExtractor"]),
        ("strategies", ["SmartErrorRecovery"]),
        ("utils", ["ParsingMetrics"]),
        ("page_handlers", ["PageNavigator", "PaginationManager"]),
        ("file_handlers", ["ConfigFileParser", "FileUpdater"]),
        ("github", ["GitHubManager"]),
        ("data_handlers", ["ServerProcessor"])
    ]
    
    all_passed = True
    failed_modules = []
    
    for module_name, classes in modules_to_test:
        print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: {module_name}")
        print("-" * 40)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            module = __import__(module_name)
            print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤
            for class_name in classes:
                try:
                    if hasattr(module, class_name):
                        print(f"  ‚úÖ {class_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        print(f"  ‚ùå {class_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–æ–¥—É–ª–µ")
                        all_passed = False
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {class_name}: {e}")
                    all_passed = False
                    
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
            failed_modules.append((module_name, str(e)))
            all_passed = False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ {module_name}: {e}")
            failed_modules.append((module_name, str(e)))
            all_passed = False
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if all_passed:
        print("üéâ –í–°–ï –ú–û–î–£–õ–ò –ü–†–û–®–õ–ò –ü–†–û–í–ï–†–ö–£ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ú–ü–û–†–¢–ê–ú–ò")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {len(failed_modules)}")
        
        if failed_modules:
            print("\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
            for module_name, error in failed_modules:
                print(f"  üì¶ {module_name}: {error}")
        
        print("\nüõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ __init__.py")
        print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ requirements.txt")
        print("  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    
    return all_passed

def test_individual_imports():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüî¨ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("=" * 60)
    
    test_imports = [
        "from core import DNSCryptParser, SmartDriverManager, ParserConfig",
        "from extractors import AdvancedDialogExtractor",
        "from strategies import SmartErrorRecovery", 
        "from utils import ParsingMetrics",
        "from page_handlers import PageNavigator, PaginationManager",
        "from file_handlers import ConfigFileParser, FileUpdater",
        "from github import GitHubManager",
        "from data_handlers import ServerProcessor"
    ]
    
    success_count = 0
    
    for import_statement in test_imports:
        try:
            exec(import_statement)
            print(f"‚úÖ {import_statement}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {import_statement}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {success_count}/{len(test_imports)}")
    return success_count == len(test_imports)

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    required_files = [
        "core/__init__.py",
        "core/base_parser.py",
        "core/config.py", 
        "core/driver_manager.py",
        "extractors/__init__.py",
        "extractors/dialog_extractor.py",
        "strategies/__init__.py",
        "strategies/error_recovery.py",
        "utils/__init__.py",
        "utils/metrics.py",
        "page_handlers/__init__.py",
        "page_handlers/page_navigator.py",
        "page_handlers/pagination_manager.py",
        "file_handlers/__init__.py",
        "file_handlers/config_parser.py",
        "file_handlers/file_updater.py",
        "github/__init__.py",
        "github/github_manager.py",
        "data_handlers/__init__.py",
        "data_handlers/server_processor.py"
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
        print("üõ†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–£–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ DNSCrypt Parser v2.0")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    structure_ok = check_file_structure()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
    modules_ok = test_module_imports()
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    imports_ok = test_individual_imports()
    
    print("\n" + "=" * 70)
    print("üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 70)
    
    overall_status = structure_ok and modules_ok and imports_ok
    
    if overall_status:
        print("üéâ –ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å parser_new.py")
    else:
        print("‚ö†Ô∏è –ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        
        if not structure_ok:
            print("  üìÅ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ñ–∞–π–ª–æ–≤")
        if not modules_ok:
            print("  üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –º–æ–¥—É–ª–µ–π")
        if not imports_ok:
            print("  üîó –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏")
    
    return overall_status

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)