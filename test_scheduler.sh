# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª scheduler –¥–ª—è —Ç–µ—Å—Ç–∞
log "BLUE" "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ scheduler'–∞..."

cat > test_scheduler.py << 'EOF'
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è scheduler'–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
"""

import time
import subprocess
import sys
import os
import signal
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('output/test_scheduler.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TestScheduler:
    def __init__(self):
        self.is_running = True
        self.last_run_file = 'output/test_last_run.txt'
        self.interval_minutes = 2  # –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 2 –º–∏–Ω—É—Ç—ã
        self.interval_seconds = self.interval_minutes * 60
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π Scheduler –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"‚è∞ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω—É—Ç")
        
    def signal_handler(self, signum, frame):
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.is_running = False
        
    def get_last_run_time(self):
        try:
            if os.path.exists(self.last_run_file):
                with open(self.last_run_file, 'r') as f:
                    timestamp = f.read().strip()
                    if timestamp:
                        return datetime.fromisoformat(timestamp)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None
        
    def save_last_run_time(self, run_time=None):
        if run_time is None:
            run_time = datetime.now()
            
        try:
            os.makedirs(os.path.dirname(self.last_run_file), exist_ok=True)
            with open(self.last_run_file, 'w') as f:
                f.write(run_time.isoformat())
            logger.info(f"üíæ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {run_time.strftime('%H:%M:%S')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
    def should_run_parser(self):
        last_run = self.get_last_run_time()
        
        if last_run is None:
            logger.info("üî• –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return True
            
        time_since_last_run = datetime.now() - last_run
        
        if time_since_last_run.total_seconds() >= self.interval_seconds:
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ—à–ª–æ {int(time_since_last_run.total_seconds())} —Å–µ–∫)")
            return True
        else:
            remaining = self.interval_seconds - time_since_last_run.total_seconds()
            logger.info(f"‚è≥ –î–æ –∑–∞–ø—É—Å–∫–∞: {int(remaining)} —Å–µ–∫—É–Ω–¥")
            return False
            
    def test_run_parser(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞"""
        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            start_time = datetime.now()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞
            logger.info("üì• –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
            time.sleep(2)
            
            logger.info("üîç –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            time.sleep(3)
            
            logger.info("üì§ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub...")
            time.sleep(1)
            
            duration = datetime.now() - start_time
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            with open('output/test_report.txt', 'w') as f:
                f.write(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤ {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n")
                f.write("–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç)\n")
            
            self.save_last_run_time(start_time)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
            
    def run(self):
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        if self.should_run_parser():
            self.test_run_parser()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        check_interval = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        while self.is_running:
            try:
                if self.should_run_parser():
                    self.test_run_parser()
                
                time.sleep(check_interval)
                
            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)
                
        logger.info("üõë –¢–µ—Å—Ç–æ–≤—ã–π scheduler –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    scheduler = TestScheduler()
    scheduler.run()
EOF

log "GREEN" "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π scheduler
log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ scheduler'–∞..."
log "YELLOW" "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"
log "YELLOW" "‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
echo

python3 test_scheduler.py

# –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
log "BLUE" "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
rm -f test_scheduler.py
rm -f output/test_*.txt

log "GREEN" "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
log "BLUE" "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ scheduler'–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
log "BLUE" "   ./manage_parser.sh"
log "BLUE" "   –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '4. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å scheduler'"