#!/bin/bash

# –ê—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∏–º–µ–Ω–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
INSTANCE_NAME="${1:-}"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–µ–ø–µ—Ä—å —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ)
ROOT_DIR="$(dirname "$(readlink -f "$0")")"
cd "$ROOT_DIR" || { echo "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"; exit 1; }

# –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞
DEFAULT_PARSER_NAME="dnscrypt-parser"
SCHEDULER_CONTAINER_NAME="dnscrypt-parser-scheduler"
MANUAL_CONTAINER_NAME="dnscrypt-parser-once"

if [ -n "$INSTANCE_NAME" ]; then
    PARSER_NAME="${DEFAULT_PARSER_NAME}_${INSTANCE_NAME}"
    SCHEDULER_CONTAINER_NAME="${SCHEDULER_CONTAINER_NAME}_${INSTANCE_NAME}"
    MANUAL_CONTAINER_NAME="${MANUAL_CONTAINER_NAME}_${INSTANCE_NAME}"
else
    PARSER_NAME="${DEFAULT_PARSER_NAME}"
fi

# –§–∞–π–ª—ã –ª–æ–≥–æ–≤
LOGS_DIR="$ROOT_DIR/logs"
OUTPUT_DIR="$ROOT_DIR/output"
mkdir -p "$LOGS_DIR" "$OUTPUT_DIR"
PARSER_LOG_FILE="$LOGS_DIR/parser.log"
ERROR_LOG_FILE="$LOGS_DIR/error.log"
SCHEDULER_LOG_FILE="$OUTPUT_DIR/scheduler.log"

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS (UTC)
CURRENT_TIME=$(date -u +%Y-%m-%d\ %H:%M:%S)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CURRENT_USER=$(whoami)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Docker
DOCKER_UID=$(id -u)
DOCKER_GID=$(id -g)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level=$1
    local message=$2
    echo -e "${!level}${message}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
update_repo() {
    log "BLUE" "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    if [ -d .git ]; then
        log "BLUE" "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        git fetch origin
        git pull origin main
        log "GREEN" "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        log "YELLOW" "‚ö†Ô∏è –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–æ–º
manage_env_file() {
    local env_file="$ROOT_DIR/.env"
    local env_example="$ROOT_DIR/.env.example"
    
    log "BLUE" "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–æ–º..."
    
    if [ ! -f "$env_example" ]; then
        log "RED" "‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    if [ ! -f "$env_file" ]; then
        log "YELLOW" "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
        cp "$env_example" "$env_file"
        log "GREEN" "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example"
    fi
    
    echo ""
    log "BLUE" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    log "GREEN" "1. üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π .env"
    log "GREEN" "2. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env (nano)"
    log "GREEN" "3. üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ .env.example"
    log "GREEN" "4. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å .env"
    log "GREEN" "0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): " env_choice
    
    case "$env_choice" in
        1)
            log "BLUE" "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞:"
            echo "================================"
            cat "$env_file" 2>/dev/null || log "RED" "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"
            echo "================================"
            ;;
        2)
            if command -v nano &> /dev/null; then
                nano "$env_file"
                log "GREEN" "‚úÖ –§–∞–π–ª .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            else
                log "RED" "‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä nano –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä."
            fi
            ;;
        3)
            cp "$env_example" "$env_file"
            log "GREEN" "‚úÖ –§–∞–π–ª .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
            ;;
        4)
            rm -f "$env_file"
            log "GREEN" "‚úÖ –§–∞–π–ª .env —É–¥–∞–ª–µ–Ω"
            ;;
        0)
            return 0
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub —Ç–æ–∫–µ–Ω–∞
check_github_token() {
    log "BLUE" "üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞..."
    
    local env_file="$ROOT_DIR/.env"
    
    if [ ! -f "$env_file" ]; then
        log "RED" "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    source "$env_file"
    
    if [ -z "${GITHUB_TOKEN:-}" ]; then
        log "RED" "‚ùå GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
        return 1
    fi
    
    log "BLUE" "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ GitHub API..."
    
    local response
    response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user)
    
    if echo "$response" | grep -q '"login"'; then
        local username
        username=$(echo "$response" | grep '"login"' | sed 's/.*"login": *"\([^"]*\)".*/\1/')
        log "GREEN" "‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $username"
    else
        log "RED" "‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API"
        log "YELLOW" "üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞: https://github.com/settings/tokens"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_modular_system() {
    log "BLUE" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã v2.0..."
    
    local all_good=true
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    local components=(
        "parser_new.py:üöÄ –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"
        "core/base_parser.py:üß† –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞"
        "core/config.py:‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        "core/driver_manager.py:üöó –ú–µ–Ω–µ–¥–∂–µ—Ä WebDriver"
        "file_handlers/config_parser.py:üìã –ü–∞—Ä—Å–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
        "file_handlers/file_updater.py:üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"
        "github/github_manager.py:üì§ GitHub –º–µ–Ω–µ–¥–∂–µ—Ä"
        "page_handlers/page_navigator.py:üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü"
        "page_handlers/pagination_manager.py:üìÑ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
        "data_handlers/server_processor.py:üñ•Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"
        "extractors/dialog_extractor.py:üí¨ –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤"
        "strategies/error_recovery.py:üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –æ—à–∏–±–æ–∫"
        "utils/metrics.py:üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    
    echo ""
    log "YELLOW" "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
    
    for component in "${components[@]}"; do
        local file_path="${component%%:*}"
        local description="${component##*:}"
        
        if [ -f "$file_path" ]; then
            log "GREEN" "‚úÖ $description"
        else
            log "RED" "‚ùå $description - —Ñ–∞–π–ª $file_path –Ω–µ –Ω–∞–π–¥–µ–Ω"
            all_good=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo ""
    log "YELLOW" "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:"
    
    local directories=(
        "core"
        "file_handlers"
        "github"
        "page_handlers"
        "data_handlers"
        "extractors"
        "strategies"
        "utils"
        "output"
        "logs"
    )
    
    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            log "GREEN" "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir/"
        else
            log "RED" "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            all_good=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    echo ""
    log "YELLOW" "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
    
    if [ -f "requirements.txt" ]; then
        log "GREEN" "‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω"
    else
        log "RED" "‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        all_good=false
    fi
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    echo ""
    if [ "$all_good" = true ]; then
        log "GREEN" "üéØ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
    else
        log "RED" "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"
        log "YELLOW" "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
manage_container() {
    local action="$1"
    
    case "$action" in
        "start_scheduler")
            start_scheduler
            ;;
        "restart_scheduler")
            restart_scheduler
            ;;
        "run_once_auto")
            run_parser_once "auto"
            ;;
        "run_once_modular")
            run_parser_once "modular"
            ;;
        *)
            log "RED" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ scheduler'–∞
start_scheduler() {
    log "BLUE" "‚è∞ –ó–∞–ø—É—Å–∫ scheduler'–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    if docker ps | grep -q "$SCHEDULER_CONTAINER_NAME"; then
        log "YELLOW" "‚ö†Ô∏è Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        return 0
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if docker ps -a | grep -q "$SCHEDULER_CONTAINER_NAME"; then
        log "BLUE" "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker rm -f "$SCHEDULER_CONTAINER_NAME" >/dev/null 2>&1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f ".env" ]; then
        log "RED" "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞."
        return 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! docker images | grep -q "$PARSER_NAME"; then
        log "BLUE" "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
        docker build -t "$PARSER_NAME" .
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler
    log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    
    docker run -d \
        --name "$SCHEDULER_CONTAINER_NAME" \
        --restart unless-stopped \
        -v "$PWD/output:/app/output" \
        -v "$PWD/logs:/app/logs" \
        --env-file .env \
        -e DOCKER_UID="$DOCKER_UID" \
        -e DOCKER_GID="$DOCKER_GID" \
        "$PARSER_NAME"
    
    if [ $? -eq 0 ]; then
        log "GREEN" "‚úÖ Scheduler —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        log "CYAN" "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°—Ç–∞—Ç—É—Å scheduler'–∞' –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    else
        log "RED" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ scheduler'–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ scheduler'–∞
stop_scheduler() {
    log "BLUE" "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ scheduler'–∞..."
    
    if docker ps | grep -q "$SCHEDULER_CONTAINER_NAME"; then
        docker stop "$SCHEDULER_CONTAINER_NAME"
        docker rm "$SCHEDULER_CONTAINER_NAME"
        log "GREEN" "‚úÖ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log "YELLOW" "‚ö†Ô∏è Scheduler –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ scheduler'–∞
restart_scheduler() {
    log "BLUE" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ scheduler'–∞..."
    stop_scheduler
    sleep 2
    start_scheduler
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ scheduler'–∞
view_scheduler_status() {
    log "BLUE" "üìä –°—Ç–∞—Ç—É—Å scheduler'–∞..."
    
    echo ""
    log "YELLOW" "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    
    if docker ps | grep -q "$SCHEDULER_CONTAINER_NAME"; then
        log "GREEN" "‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        docker ps --filter "name=$SCHEDULER_CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        echo ""
        log "YELLOW" "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ scheduler'–∞:"
        docker logs --tail 20 "$SCHEDULER_CONTAINER_NAME" 2>/dev/null || log "YELLOW" "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
    else
        log "RED" "‚ùå Scheduler –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    echo ""
    log "YELLOW" "üìÅ –§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è:"
    
    if [ -f "$OUTPUT_DIR/last_run.txt" ]; then
        local last_run
        last_run=$(cat "$OUTPUT_DIR/last_run.txt")
        log "GREEN" "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: $last_run"
    else
        log "YELLOW" "üìÖ –§–∞–π–ª last_run.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "$SCHEDULER_LOG_FILE" ]; then
        local log_size
        log_size=$(wc -l < "$SCHEDULER_LOG_FILE")
        log "GREEN" "üìä –õ–æ–≥ scheduler'–∞: $log_size —Å—Ç—Ä–æ–∫"
    else
        log "YELLOW" "üìã –õ–æ–≥ scheduler'–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞ scheduler'–∞
reset_scheduler_timer() {
    log "BLUE" "‚è∞ –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ scheduler'–∞..."
    
    if docker ps | grep -q "$SCHEDULER_CONTAINER_NAME"; then
        log "BLUE" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º scheduler –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞..."
        restart_scheduler
        log "GREEN" "‚úÖ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω. Scheduler –∑–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–µ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
    else
        log "YELLOW" "‚ö†Ô∏è Scheduler –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
run_parser_once() {
    local mode="${1:-auto}"
    
    log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ: $mode..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f ".env" ]; then
        log "RED" "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞."
        return 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! docker images | grep -q "$PARSER_NAME"; then
        log "BLUE" "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
        docker build -t "$PARSER_NAME" .
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
    local cmd="python parser_new.py"
    if [ "$mode" = "modular" ]; then
        cmd="python parser_new.py --force-modular"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    log "BLUE" "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞..."
    
    docker run --rm \
        --name "$MANUAL_CONTAINER_NAME" \
        -v "$PWD/output:/app/output" \
        -v "$PWD/logs:/app/logs" \
        --env-file .env \
        -e DOCKER_UID="$DOCKER_UID" \
        -e DOCKER_GID="$DOCKER_GID" \
        "$PARSER_NAME" $cmd
    
    if [ $? -eq 0 ]; then
        log "GREEN" "‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!"
    else
        log "RED" "‚ùå –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    log "BLUE" "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
    
    echo ""
    log "YELLOW" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:"
    log "GREEN" "1. üìù –õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ (parser.log)"
    log "GREEN" "2. ‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ (error.log)"
    log "GREEN" "3. ‚è∞ –õ–æ–≥–∏ scheduler'–∞ (scheduler.log)"
    log "GREEN" "4. üìä –ú–µ—Ç—Ä–∏–∫–∏ (metrics.csv)"
    log "GREEN" "5. üê≥ –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    log "GREEN" "0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ (0-5): " log_choice
    
    case "$log_choice" in
        1)
            if [ -f "$PARSER_LOG_FILE" ]; then
                log "BLUE" "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ parser.log:"
                echo "================================"
                tail -50 "$PARSER_LOG_FILE"
                echo "================================"
            else
                log "YELLOW" "üìù –§–∞–π–ª parser.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        2)
            if [ -f "$ERROR_LOG_FILE" ]; then
                log "BLUE" "‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ error.log:"
                echo "================================"
                tail -50 "$ERROR_LOG_FILE"
                echo "================================"
            else
                log "YELLOW" "‚ùå –§–∞–π–ª error.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        3)
            if [ -f "$SCHEDULER_LOG_FILE" ]; then
                log "BLUE" "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ scheduler.log:"
                echo "================================"
                tail -50 "$SCHEDULER_LOG_FILE"
                echo "================================"
            else
                log "YELLOW" "‚è∞ –§–∞–π–ª scheduler.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        4)
            if [ -f "$LOGS_DIR/metrics.csv" ]; then
                log "BLUE" "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ metrics.csv:"
                echo "================================"
                tail -20 "$LOGS_DIR/metrics.csv"
                echo "================================"
            else
                log "YELLOW" "üìä –§–∞–π–ª metrics.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        5)
            if docker ps | grep -q "$SCHEDULER_CONTAINER_NAME"; then
                log "BLUE" "üê≥ –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
                echo "================================"
                docker logs --tail 50 "$SCHEDULER_CONTAINER_NAME"
                echo "================================"
            else
                log "YELLOW" "üê≥ Scheduler –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            fi
            ;;
        0)
            return 0
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
view_results() {
    log "BLUE" "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞..."
    
    echo ""
    log "YELLOW" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    log "GREEN" "1. üñ•Ô∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (DNSCrypt_servers.txt)"
    log "GREEN" "2. üîó –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–µ–≤ (DNSCrypt_relay.txt)"
    log "GREEN" "3. üìÑ –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ (update_report.txt)"
    log "GREEN" "4. üìã –û—Ç—á–µ—Ç scheduler'–∞ (scheduler_report.txt)"
    log "GREEN" "5. üìÅ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ output/"
    log "GREEN" "0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0-5): " result_choice
    
    case "$result_choice" in
        1)
            if [ -f "$OUTPUT_DIR/DNSCrypt_servers.txt" ]; then
                log "BLUE" "üñ•Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ DNSCrypt_servers.txt:"
                echo "================================"
                cat "$OUTPUT_DIR/DNSCrypt_servers.txt"
                echo "================================"
            else
                log "YELLOW" "üñ•Ô∏è –§–∞–π–ª DNSCrypt_servers.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        2)
            if [ -f "$OUTPUT_DIR/DNSCrypt_relay.txt" ]; then
                log "BLUE" "üîó –°–æ–¥–µ—Ä–∂–∏–º–æ–µ DNSCrypt_relay.txt:"
                echo "================================"
                cat "$OUTPUT_DIR/DNSCrypt_relay.txt"
                echo "================================"
            else
                log "YELLOW" "üîó –§–∞–π–ª DNSCrypt_relay.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        3)
            if [ -f "$OUTPUT_DIR/update_report.txt" ]; then
                log "BLUE" "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ update_report.txt:"
                echo "================================"
                cat "$OUTPUT_DIR/update_report.txt"
                echo "================================"
            else
                log "YELLOW" "üìÑ –§–∞–π–ª update_report.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        4)
            if [ -f "$OUTPUT_DIR/scheduler_report.txt" ]; then
                log "BLUE" "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ scheduler_report.txt:"
                echo "================================"
                cat "$OUTPUT_DIR/scheduler_report.txt"
                echo "================================"
            else
                log "YELLOW" "üìã –§–∞–π–ª scheduler_report.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        5)
            log "BLUE" "üìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ output/:"
            echo "================================"
            ls -la "$OUTPUT_DIR/" 2>/dev/null || log "YELLOW" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è output/ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            echo "================================"
            ;;
        0)
            return 0
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
cleanup_logs() {
    log "BLUE" "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤..."
    
    echo ""
    log "YELLOW" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    log "GREEN" "1. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏"
    log "GREEN" "2. üìù –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ parser.log"
    log "GREEN" "3. ‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ error.log"
    log "GREEN" "4. ‚è∞ –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ scheduler.log"
    log "GREEN" "5. üìä –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ metrics.csv"
    log "GREEN" "0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): " cleanup_choice
    
    case "$cleanup_choice" in
        1)
            read -r -p "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –ª–æ–≥–∏? [y/N] " confirm
            if [[ "$confirm" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                rm -f "$PARSER_LOG_FILE" "$ERROR_LOG_FILE" "$SCHEDULER_LOG_FILE" "$LOGS_DIR/metrics.csv"
                log "GREEN" "‚úÖ –í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
            else
                log "YELLOW" "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
            fi
            ;;
        2)
            > "$PARSER_LOG_FILE"
            log "GREEN" "‚úÖ parser.log –æ—á–∏—â–µ–Ω"
            ;;
        3)
            > "$ERROR_LOG_FILE"
            log "GREEN" "‚úÖ error.log –æ—á–∏—â–µ–Ω"
            ;;
        4)
            > "$SCHEDULER_LOG_FILE"
            log "GREEN" "‚úÖ scheduler.log –æ—á–∏—â–µ–Ω"
            ;;
        5)
            > "$LOGS_DIR/metrics.csv"
            log "GREEN" "‚úÖ metrics.csv –æ—á–∏—â–µ–Ω"
            ;;
        0)
            return 0
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Docker
cleanup_docker() {
    log "BLUE" "üê≥ –û—á–∏—Å—Ç–∫–∞ Docker..."
    
    echo ""
    log "YELLOW" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    log "GREEN" "1. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"
    log "GREEN" "2. üßπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    log "GREEN" "3. üì¶ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã"
    log "GREEN" "4. üíæ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞"
    log "GREEN" "5. üîÑ –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –ø–∞—Ä—Å–µ—Ä–∞"
    log "GREEN" "0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): " docker_choice
    
    case "$docker_choice" in
        1)
            read -r -p "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã [y/N] " confirm
            if [[ "$confirm" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                docker system prune -af
                log "GREEN" "‚úÖ Docker –æ—á–∏—â–µ–Ω"
            else
                log "YELLOW" "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
            fi
            ;;
        2)
            docker container prune -f
            log "GREEN" "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã"
            ;;
        3)
            docker image prune -af
            log "GREEN" "‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã"
            ;;
        4)
            docker volume prune -f
            log "GREEN" "‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞ —É–¥–∞–ª–µ–Ω—ã"
            ;;
        5)
            log "BLUE" "üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –ø–∞—Ä—Å–µ—Ä–∞..."
            docker rmi -f "$PARSER_NAME" 2>/dev/null || true
            docker build -t "$PARSER_NAME" .
            log "GREEN" "‚úÖ –û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
            ;;
        0)
            return 0
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_fix_docker() {
    log "BLUE" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
    if ! command -v docker &> /dev/null; then
        log "RED" "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        log "YELLOW" "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: https://docs.docker.com/engine/install/"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker
    if ! docker info &> /dev/null; then
        log "RED" "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!"
        log "YELLOW" "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker:"
        log "YELLOW" "    sudo usermod -aG docker $USER"
        log "YELLOW" "    newgrp docker"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker —á–µ—Ä–µ–∑ snap
    if command -v snap &> /dev/null && snap list 2>/dev/null | grep -q docker; then
        log "YELLOW" "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Docker, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ snap. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é."
        
        read -r -p "–£–¥–∞–ª–∏—Ç—å Docker (snap) –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é? [Y/n] " response
        response=${response:-Y}
        
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            log "BLUE" "üîÑ –£–¥–∞–ª–µ–Ω–∏–µ Docker, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ snap..."
            sudo snap remove docker
            
            log "BLUE" "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Docker..."
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
            sudo usermod -aG docker $USER
            
            log "GREEN" "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        fi
    else
        log "GREEN" "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
        local docker_version
        docker_version=$(docker --version)
        log "CYAN" "üìã $docker_version"
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        clear
        log "YELLOW" "üîç DNSCrypt Parser v2.0 with Modular System & Scheduler"
        log "YELLOW" "==========================================================="
        log "GREEN" "1. ‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        log "GREEN" "2. üìù –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª"
        log "GREEN" "3. üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GitHub —Ç–æ–∫–µ–Ω"
        log "GREEN" "4. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        log "GREEN" "5. ‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å scheduler (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"
        log "GREEN" "6. ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å scheduler"
        log "GREEN" "7. üìä –°—Ç–∞—Ç—É—Å scheduler'–∞"
        log "GREEN" "8. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å scheduler"
        log "GREEN" "9. ‚è∞ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä scheduler'–∞"
        log "YELLOW" ""
        log "YELLOW" "üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê:"
        log "GREEN" "10. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä)"
        log "GREEN" "11. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v2.0"
        log "YELLOW" ""
        log "YELLOW" "üìã –ü–†–û–°–ú–û–¢–† –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï:"
        log "GREEN" "12. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
        log "GREEN" "13. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"
        log "GREEN" "14. üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"
        log "GREEN" "15. üê≥ –û—á–∏—Å—Ç–∏—Ç—å Docker"
        log "GREEN" "16. üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker"
        log "GREEN" "0. üö™ –í—ã–π—Ç–∏"

        echo ""
        read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-16): " choice

        case "$choice" in
            1)
                update_repo
                ;;
            2)
                manage_env_file
                ;;
            3)
                check_github_token
                ;;
            4)
                check_modular_system
                ;;
            5)
                manage_container "start_scheduler"
                ;;
            6)
                stop_scheduler
                ;;
            7)
                view_scheduler_status
                ;;
            8)
                manage_container "restart_scheduler"
                ;;
            9)
                reset_scheduler_timer
                ;;
            10)
                manage_container "run_once_auto"
                ;;
            11)
                manage_container "run_once_modular"
                ;;
            12)
                view_logs
                ;;
            13)
                view_results
                ;;
            14)
                cleanup_logs
                ;;
            15)
                cleanup_docker
                ;;
            16)
                check_fix_docker
                ;;
            0)
                log "BLUE" "üö™ –í—ã—Ö–æ–¥..."
                break
                ;;
            *)
                log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 0 –¥–æ 16."
                ;;
        esac
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        echo ""
        read -r -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
init() {
    log "BLUE" "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DNSCrypt Parser Manager..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
    if ! command -v docker &> /dev/null; then
        log "RED" "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "$LOGS_DIR" "$OUTPUT_DIR"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    init "$@"
fi
