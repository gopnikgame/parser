"""
–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1
"""
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    from ..core.config import ParserConfig
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from core.config import ParserConfig

class PageNavigator:
    """–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.selectors = {
            'vue_app': ['#app', '[data-app]', '.v-application'],
            'data_table': ['.v-data-table', 'table', '.v-datatable'],
            'loading': ['.v-progress-linear', '.v-skeleton-loader', '.loading'],
            'data_rows': ['table tbody tr', '.v-data-table tbody tr', 'tr[data-item]'],
            'server_rows': ['tbody tr:not(.v-data-table__empty-wrapper)']
        }
    
    def navigate_to_page(self, url: str, max_attempts: int = 3) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        for attempt in range(max_attempts):
            try:
                print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                
                if attempt > 0:
                    self.driver.delete_all_cookies()
                
                self.driver.get(url)
                
                if self._wait_for_vue_app() and self._wait_for_data_load():
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    return True
                else:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
            time.sleep(5 * (attempt + 1))
        
        print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã...")
        self.debug_page_structure()
        return False
    
    def _wait_for_vue_app(self, timeout: int = 30) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            wait = WebDriverWait(self.driver, timeout)
            
            wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
            
            for selector in self.selectors['vue_app']:
                try:
                    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                    print(f"‚úÖ Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {selector}")
                    return True
                except TimeoutException:
                    continue
            
            print("‚ö†Ô∏è Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _wait_for_data_load(self, timeout: int = 60) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            
            start_time = time.time()
            
            while time.time() - start_time < timeout:
                loading_active = self._check_loading_indicators()
                data_rows = self._find_data_rows()
                visible_rows = [row for row in data_rows if row.is_displayed() and row.text.strip()]
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
                
                if not loading_active and len(visible_rows) >= 10:
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: {len(visible_rows)} —Å—Ç—Ä–æ–∫")
                    return True
                
                time.sleep(3)
            
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _check_loading_indicators(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            for selector in self.selectors['loading']:
                elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                for element in elements:
                    if element.is_displayed():
                        return True
            return False
        except:
            return False
    
    def _find_data_rows(self) -> list:
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö"""
        all_rows = []
        
        for selector in self.selectors['data_rows']:
            try:
                rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                all_rows.extend(rows)
            except:
                continue
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = []
        seen = set()
        for row in all_rows:
            row_id = id(row)
            if row_id not in seen:
                seen.add(row_id)
                unique_rows.append(row)
        
        return unique_rows
    
    def wait_for_dynamic_content(self, timeout: int = 300) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return self._wait_for_data_load(timeout)
    
    def debug_page_structure(self) -> bool:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´...")
            
            title = self.driver.title
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vue.js
            try:
                vue_info = self.driver.execute_script("""
                    return {
                        hasVue: typeof Vue !== 'undefined',
                        vueApp: document.querySelector('[data-app]') !== null
                    };
                """)
                print(f"‚öôÔ∏è Vue.js —Å—Ç–∞—Ç—É—Å: {vue_info}")
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Vue.js")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = self.driver.find_elements(By.TAG_NAME, "table")
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            for i, table in enumerate(tables):
                if table.is_displayed():
                    rows = table.find_elements(By.CSS_SELECTOR, "tbody tr")
                    print(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {len(rows)} —Å—Ç—Ä–æ–∫")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False