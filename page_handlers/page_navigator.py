"""
–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
"""
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from ..core.config import ParserConfig

class PageNavigator:
    """–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
    
    def navigate_to_page(self, url: str, max_attempts: int = 3) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        for attempt in range(max_attempts):
            try:
                print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                
                self.driver.get(url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–º–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
                if self._wait_for_page_load_smart():
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    return True
                else:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                time.sleep(5 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return False
    
    def _wait_for_page_load_smart(self, timeout: int = None) -> bool:
        """–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if timeout is None:
            timeout = self.config.PAGE_LOAD_TIMEOUT
            
        try:
            wait = WebDriverWait(self.driver, timeout)
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            wait.until(EC.presence_of_element_located((By.TAG_NAME, "table")))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for _ in range(30):  # –ú–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫
                try:
                    network_idle = self.driver.execute_script("""
                        return window.performance.getEntriesByType('resource')
                            .filter(r => r.responseEnd === 0).length === 0;
                    """)
                    
                    if network_idle:
                        break
                        
                except:
                    pass
                
                time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            data_rows = self.driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
            visible_rows = [row for row in data_rows if row.is_displayed() and row.text.strip()]
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            return len(visible_rows) > 50  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 50 —Å–µ—Ä–≤–µ—Ä–æ–≤
            
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def wait_for_dynamic_content(self, timeout: int = 300) -> bool:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            print("‚è≥ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            start_time = time.time()
            last_content_length = 0
            stable_count = 0
            
            while time.time() - start_time < timeout:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
                    current_content_length = len(self.driver.page_source)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    network_idle = self.driver.execute_script("""
                        return window.performance.getEntriesByType('resource')
                            .filter(r => r.responseEnd === 0).length === 0;
                    """)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    loading_elements = self.driver.find_elements(By.CSS_SELECTOR, 
                        ".v-progress-linear, .loading, .spinner, [role='progressbar'], .v-skeleton-loader")
                    loading_active = any(elem.is_displayed() for elem in loading_elements)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
                    data_rows = self.driver.find_elements(By.CSS_SELECTOR, "table tbody tr, .v-data-table tbody tr")
                    visible_rows = [row for row in data_rows if row.is_displayed() and row.text.strip() and "loading" not in row.text.lower()]
                    
                    print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ—Ç—å={network_idle}, –∑–∞–≥—Ä—É–∑–∫–∞={not loading_active}, —Å—Ç—Ä–æ–∫={len(visible_rows)}, —Ä–∞–∑–º–µ—Ä={current_content_length}")
                    
                    # –£—Å–ª–æ–≤–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                    if (network_idle and not loading_active and len(visible_rows) > 10):
                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤: {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
                        return True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if current_content_length == last_content_length:
                        stable_count += 1
                    else:
                        stable_count = 0
                        last_content_length = current_content_length
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–µ–Ω –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º
                    if stable_count > 10:
                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è ({len(visible_rows)} —Å—Ç—Ä–æ–∫)")
                        return len(visible_rows) > 0
                    
                    time.sleep(3)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
                    time.sleep(5)
            
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
            return False
    
    def debug_page_structure(self) -> bool:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            print("üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = self.driver.title
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            # 2. –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            containers = [
                "#app", "[data-app]", ".v-application", ".v-main", 
                ".container", ".v-data-table", "table", ".datatable",
                ".servers", ".server-list", "#servers", "#server-list"
            ]
            
            for container in containers:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, container)
                    if elements:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                        for i, elem in enumerate(elements[:3]):
                            if elem.is_displayed():
                                text_preview = elem.text[:100].replace('\n', ' ')
                                print(f"   [{i+1}] –í–∏–¥–∏–º—ã–π: {text_preview}...")
                except:
                    continue
            
            # 3. –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶:")
            tables = self.driver.find_elements(By.TAG_NAME, "table")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            for i, table in enumerate(tables):
                if table.is_displayed():
                    rows = table.find_elements(By.TAG_NAME, "tr")
                    print(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {len(rows)} —Å—Ç—Ä–æ–∫, –≤–∏–¥–∏–º–∞: {table.is_displayed()}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                    for j, row in enumerate(rows[:5]):
                        if row.text.strip():
                            print(f"    –°—Ç—Ä–æ–∫–∞ {j+1}: {row.text[:80]}...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False