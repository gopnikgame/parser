# –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—Å–µ—Ä–∞
import time
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, asdict

@dataclass
class ServerExtractionMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_name: str
    success: bool
    duration: float
    attempt_count: int
    error_type: Optional[str] = None
    extraction_method: Optional[str] = None
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())

@dataclass
class SessionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    session_id: str
    start_time: str
    end_time: Optional[str] = None
    total_servers: int = 0
    successful_extractions: int = 0
    failed_extractions: int = 0
    total_duration: float = 0.0
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    error_stats: Dict[str, int] = field(default_factory=dict)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    method_stats: Dict[str, int] = field(default_factory=dict)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    timing_stats: Dict[str, float] = field(default_factory=dict)
    
    # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    server_metrics: List[ServerExtractionMetric] = field(default_factory=list)
    
    def add_server_metric(self, metric: ServerExtractionMetric):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_metrics.append(metric)
        self.total_servers += 1
        
        if metric.success:
            self.successful_extractions += 1
        else:
            self.failed_extractions += 1
            if metric.error_type:
                self.error_stats[metric.error_type] = self.error_stats.get(metric.error_type, 0) + 1
        
        if metric.extraction_method:
            self.method_stats[metric.extraction_method] = self.method_stats.get(metric.extraction_method, 0) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
        self.timing_stats['total_duration'] = self.timing_stats.get('total_duration', 0) + metric.duration
        self.timing_stats['avg_duration'] = self.timing_stats['total_duration'] / self.total_servers
        
        if metric.success:
            self.timing_stats['avg_success_duration'] = (
                self.timing_stats.get('success_duration_sum', 0) + metric.duration
            ) / self.successful_extractions
            self.timing_stats['success_duration_sum'] = (
                self.timing_stats.get('success_duration_sum', 0) + metric.duration
            )
    
    def finalize(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Å—Å–∏–∏"""
        self.end_time = datetime.now().isoformat()
        if self.server_metrics:
            start = datetime.fromisoformat(self.server_metrics[0].timestamp)
            end = datetime.now()
            self.total_duration = (end - start).total_seconds()
    
    def get_success_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        if self.total_servers == 0:
            return 0.0
        return (self.successful_extractions / self.total_servers) * 100
    
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏"""
        return {
            'session_id': self.session_id,
            'success_rate': self.get_success_rate(),
            'total_servers': self.total_servers,
            'successful': self.successful_extractions,
            'failed': self.failed_extractions,
            'duration': self.total_duration,
            'avg_duration_per_server': self.timing_stats.get('avg_duration', 0),
            'top_errors': dict(sorted(self.error_stats.items(), key=lambda x: x[1], reverse=True)[:5])
        }

class ParsingMetrics:
    """–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self, output_dir: str = "./output"):
        self.output_dir = output_dir
        self.metrics_file = os.path.join(output_dir, "parsing_metrics.json")
        self.current_session: Optional[SessionMetrics] = None
        self.historical_metrics: List[SessionMetrics] = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(output_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self._load_historical_metrics()
    
    def start_session(self, session_id: str = None) -> str:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        if session_id is None:
            session_id = f"session_{int(time.time())}"
        
        self.current_session = SessionMetrics(
            session_id=session_id,
            start_time=datetime.now().isoformat()
        )
        
        print(f"üìä –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –º–µ—Ç—Ä–∏–∫: {session_id}")
        return session_id
    
    def record_server_extraction(
        self, 
        server_name: str, 
        success: bool, 
        duration: float,
        attempt_count: int = 1,
        error_type: str = None,
        extraction_method: str = None
    ):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.current_session:
            self.start_session()
        
        metric = ServerExtractionMetric(
            server_name=server_name,
            success=success,
            duration=duration,
            attempt_count=attempt_count,
            error_type=error_type,
            extraction_method=extraction_method
        )
        
        self.current_session.add_server_metric(metric)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        session = self.current_session
        print(f"üìä [{session.total_servers}] {server_name}: "
              f"{'‚úÖ' if success else '‚ùå'} ({duration:.2f}s)")
    
    def end_session(self) -> Optional[SessionMetrics]:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if not self.current_session:
            return None
        
        self.current_session.finalize()
        self.historical_metrics.append(self.current_session)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self._save_metrics()
        
        session = self.current_session
        self.current_session = None
        
        print(f"üìä –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session.session_id}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {session.get_success_rate():.1f}% "
              f"({session.successful_extractions}/{session.total_servers})")
        
        return session
    
    def generate_detailed_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.current_session and not self.historical_metrics:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        session = self.current_session
        if not session and self.historical_metrics:
            session = self.historical_metrics[-1]
        
        if not session:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
        
        report = f"""
üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–ê–†–°–ò–ù–ì–ê
{'='*60}
üÜî –°–µ—Å—Å–∏—è: {session.session_id}
‚è∞ –í—Ä–µ–º—è: {session.start_time} - {session.end_time or '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session.total_duration:.1f} —Å–µ–∫

üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {session.total_servers}
   –£—Å–ø–µ—à–Ω–æ: {session.successful_extractions} ({session.get_success_rate():.1f}%)
   –ù–µ—É–¥–∞—á–Ω–æ: {session.failed_extractions}
   
‚è±Ô∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {session.timing_stats.get('avg_duration', 0):.2f}—Å
   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {session.timing_stats.get('avg_success_duration', 0):.2f}—Å
   –û–±—â–µ–µ –≤—Ä–µ–º—è: {session.total_duration:.1f}—Å

‚ùå –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö:"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        if session.error_stats:
            for error_type, count in sorted(session.error_stats.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / session.failed_extractions) * 100 if session.failed_extractions > 0 else 0
                report += f"\n   {error_type}: {count} ({percentage:.1f}%)"
        else:
            report += "\n   –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç–æ–¥–æ–≤
        if session.method_stats:
            report += f"\n\nüîß –ú–ï–¢–û–î–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:"
            for method, count in sorted(session.method_stats.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / session.total_servers) * 100
                report += f"\n   {method}: {count} ({percentage:.1f}%)"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        failed_servers = [m for m in session.server_metrics if not m.success]
        if failed_servers:
            report += f"\n\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–ï–†–í–ï–†–´ ({len(failed_servers)}):"
            for server in failed_servers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report += f"\n   {server.server_name}: {server.error_type or 'Unknown error'}"
            if len(failed_servers) > 10:
                report += f"\n   ... –∏ –µ—â–µ {len(failed_servers) - 10} —Å–µ—Ä–≤–µ—Ä–æ–≤"

        return report
    
    def get_historical_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        recent_sessions = [
            s for s in self.historical_metrics 
            if datetime.fromisoformat(s.start_time) > cutoff_date
        ]
        
        if not recent_sessions:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}
        
        total_servers = sum(s.total_servers for s in recent_sessions)
        total_successful = sum(s.successful_extractions for s in recent_sessions)
        avg_success_rate = (total_successful / total_servers * 100) if total_servers > 0 else 0
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        all_errors = {}
        for session in recent_sessions:
            for error_type, count in session.error_stats.items():
                all_errors[error_type] = all_errors.get(error_type, 0) + count
        
        return {
            "period_days": days,
            "sessions_count": len(recent_sessions),
            "total_servers": total_servers,
            "total_successful": total_successful,
            "avg_success_rate": avg_success_rate,
            "top_errors": dict(sorted(all_errors.items(), key=lambda x: x[1], reverse=True)[:5]),
            "latest_session": recent_sessions[-1].get_summary() if recent_sessions else None
        }
    
    def _load_historical_metrics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        if os.path.exists(self.metrics_file):
            try:
                with open(self.metrics_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.historical_metrics = []
                for session_data in data.get('sessions', []):
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SessionMetrics –∏–∑ JSON
                    session = SessionMetrics(**{
                        k: v for k, v in session_data.items() 
                        if k != 'server_metrics'
                    })
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
                    for metric_data in session_data.get('server_metrics', []):
                        metric = ServerExtractionMetric(**metric_data)
                        session.server_metrics.append(metric)
                    
                    self.historical_metrics.append(session)
                
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.historical_metrics)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")
                self.historical_metrics = []
    
    def _save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                "last_updated": datetime.now().isoformat(),
                "sessions": [asdict(session) for session in self.historical_metrics]
            }
            
            with open(self.metrics_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.metrics_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {e}")
    
    def export_csv_report(self, filename: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        if filename is None:
            filename = os.path.join(self.output_dir, f"parsing_report_{int(time.time())}.csv")
        
        try:
            import csv
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow([
                    'Session ID', 'Server Name', 'Success', 'Duration (s)',
                    'Attempt Count', 'Error Type', 'Extraction Method', 'Timestamp'
                ])
                
                # –î–∞–Ω–Ω—ã–µ
                for session in self.historical_metrics:
                    for metric in session.server_metrics:
                        writer.writerow([
                            session.session_id,
                            metric.server_name,
                            metric.success,
                            metric.duration,
                            metric.attempt_count,
                            metric.error_type or '',
                            metric.extraction_method or '',
                            metric.timestamp
                        ])
            
            print(f"üìä CSV –æ—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
            return ""

class ParsingCache:
    """–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self, cache_dir: str = "./output/cache"):
        self.cache_dir = cache_dir
        self.cache_file = os.path.join(cache_dir, "server_cache.json")
        self.cache_duration = 3600 * 24  # 24 —á–∞—Å–∞
        self.cache = {}
        
        os.makedirs(cache_dir, exist_ok=True)
        self._load_cache()
    
    def get_cached_server_info(self, server_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        if server_name in self.cache:
            data, timestamp = self.cache[server_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—ç—à–∞
            if time.time() - timestamp < self.cache_duration:
                print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –¥–ª—è {server_name}")
                return data
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                del self.cache[server_name]
        
        return None
    
    def cache_server_info(self, server_name: str, info: Dict[str, Any]):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        self.cache[server_name] = (info, time.time())
        self._save_cache()
        print(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {server_name}")
    
    def clear_expired_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
        current_time = time.time()
        expired_keys = []
        
        for server_name, (data, timestamp) in self.cache.items():
            if current_time - timestamp >= self.cache_duration:
                expired_keys.append(server_name)
        
        for key in expired_keys:
            del self.cache[key]
        
        if expired_keys:
            print(f"üíæ –û—á–∏—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è {len(expired_keys)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            self._save_cache()
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        current_time = time.time()
        valid_entries = 0
        expired_entries = 0
        
        for server_name, (data, timestamp) in self.cache.items():
            if current_time - timestamp < self.cache_duration:
                valid_entries += 1
            else:
                expired_entries += 1
        
        return {
            "total_entries": len(self.cache),
            "valid_entries": valid_entries,
            "expired_entries": expired_entries,
            "cache_hit_rate": 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            "cache_duration_hours": self.cache_duration / 3600
        }
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.cache_file):
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    self.cache = json.load(f)
                print(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à —Å {len(self.cache)} –∑–∞–ø–∏—Å—è–º–∏")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à: {e}")
                self.cache = {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à: {e}")