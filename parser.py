# –ó–∞–¥–∞—á–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ https://dnscrypt.info/public-servers
# –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ GitHub
# –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å IPv4 –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ DNSCrypt/DNSCrypt relay

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
import re
import time
import subprocess
import urllib.request
import os
import requests
import base64
import json
import signal
import psutil
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

def get_default_chrome_options():
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –æ–ø—Ü–∏–∏ Chrome –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    options = webdriver.ChromeOptions()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è Docker
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-plugins")
    options.add_argument("--disable-images")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¥–ª—è Docker
    options.add_argument("--remote-debugging-port=9222")
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--disable-features=TranslateUI")
    options.add_argument("--disable-ipc-flooding-protection")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    options.add_argument("--max_old_space_size=4096")
    options.add_argument("--single-process")
    options.add_argument("--no-zygote")
    
    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    options.add_argument("--window-size=1920,1080")
    
    # User agent
    options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # Headless —Ä–µ–∂–∏–º
    if os.getenv('CHROME_HEADLESS', 'true').lower() == 'true':
        options.add_argument("--headless=new")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    return options

def kill_existing_chrome():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] and 'chrome' in proc.info['name'].lower():
                try:
                    proc.terminate()
                    proc.wait(timeout=3)
                except:
                    try:
                        proc.kill()
                    except:
                        pass
        
        subprocess.run(['pkill', '-f', 'chrome'], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(['pkill', '-f', 'chromium'], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome: {e}")

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome –¥–ª—è Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    kill_existing_chrome()
    
    try:
        options = get_default_chrome_options()
        driver = webdriver.Chrome(options=options)
        
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ WebDriver
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è Vue.js")
        return driver
        
    except WebDriverException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {str(e)}")
        return None

def debug_page_structure(driver):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        print("üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = driver.title
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
        
        # 2. –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        containers = [
            "#app", "[data-app]", ".v-application", ".v-main", 
            ".container", ".v-data-table", "table", ".datatable",
            ".servers", ".server-list", "#servers", "#server-list"
        ]
        
        for container in containers:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, container)
                if elements:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                    for i, elem in enumerate(elements[:3]):
                        if elem.is_displayed():
                            text_preview = elem.text[:100].replace('\n', ' ')
                            print(f"   [{i+1}] –í–∏–¥–∏–º—ã–π: {text_preview}...")
            except:
                continue
        
        # 3. –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶:")
        tables = driver.find_elements(By.TAG_NAME, "table")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        for i, table in enumerate(tables):
            if table.is_displayed():
                rows = table.find_elements(By.TAG_NAME, "tr")
                print(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {len(rows)} —Å—Ç—Ä–æ–∫, –≤–∏–¥–∏–º–∞: {table.is_displayed()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                for j, row in enumerate(rows[:5]):
                    if row.text.strip():
                        print(f"    –°—Ç—Ä–æ–∫–∞ {j+1}: {row.text[:80]}...")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        print("\n‚è≥ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò:")
        loading_indicators = [
            ".v-progress-linear", ".loading", ".spinner", 
            "[role='progressbar']", ".v-skeleton-loader"
        ]
        
        for indicator in loading_indicators:
            elements = driver.find_elements(By.CSS_SELECTOR, indicator)
            if elements:
                print(f"‚è≥ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: {indicator}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript –æ—à–∏–±–∫–∏
        try:
            logs = driver.get_log('browser')
            errors = [log for log in logs if log['level'] in ['SEVERE', 'WARNING']]
            if errors:
                print(f"\n‚ö†Ô∏è JavaScript –ø—Ä–æ–±–ª–µ–º—ã ({len(errors)}):")
                for error in errors[:3]:
                    print(f"   {error['level']}: {error['message'][:100]}...")
        except:
            pass
        
        # 6. –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try:
            print("\nüîß JavaScript –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vue.js
            vue_version = driver.execute_script("return window.Vue ? Vue.version || 'detected' : 'not found';")
            print(f"Vue.js: {vue_version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            vue_data = driver.execute_script("""
                var app = document.querySelector('[data-app]');
                if (app && app.__vue__) {
                    return 'Vue instance found';
                }
                return 'No Vue instance';
            """)
            print(f"Vue instance: {vue_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            dom_state = driver.execute_script("return document.readyState;")
            print(f"DOM —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {dom_state}")
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ window –æ–±—ä–µ–∫—Ç–µ
            window_data = driver.execute_script("""
                var keys = Object.keys(window).filter(k => 
                    k.toLowerCase().includes('server') || 
                    k.toLowerCase().includes('data') ||
                    k.toLowerCase().includes('vue')
                );
                return keys.slice(0, 10);
            """)
            print(f"–î–∞–Ω–Ω—ã–µ –≤ window: {window_data}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JavaScript –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False


def wait_for_dynamic_content(driver, timeout=300):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        print("‚è≥ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        start_time = time.time()
        last_content_length = 0
        stable_count = 0
        
        while time.time() - start_time < timeout:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
                current_content_length = len(driver.page_source)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                network_idle = driver.execute_script("""
                    return window.performance.getEntriesByType('resource')
                        .filter(r => r.responseEnd === 0).length === 0;
                """)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                loading_elements = driver.find_elements(By.CSS_SELECTOR, 
                    ".v-progress-linear, .loading, .spinner, [role='progressbar'], .v-skeleton-loader")
                loading_active = any(elem.is_displayed() for elem in loading_elements)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
                data_rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr, .v-data-table tbody tr")
                visible_rows = [row for row in data_rows if row.is_displayed() and row.text.strip() and "loading" not in row.text.lower()]
                
                print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ—Ç—å={network_idle}, –∑–∞–≥—Ä—É–∑–∫–∞={not loading_active}, —Å—Ç—Ä–æ–∫={len(visible_rows)}, —Ä–∞–∑–º–µ—Ä={current_content_length}")
                
                # –£—Å–ª–æ–≤–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                if (network_idle and not loading_active and len(visible_rows) > 10):
                    print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤: {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if current_content_length == last_content_length:
                    stable_count += 1
                else:
                    stable_count = 0
                    last_content_length = current_content_length
                
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–µ–Ω –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º
                if stable_count > 10:
                    print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è ({len(visible_rows)} —Å—Ç—Ä–æ–∫)")
                    return len(visible_rows) > 0
                
                time.sleep(3)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
                time.sleep(5)
        
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
        return False

def wait_for_vue_app_ready(driver, timeout=60):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        vue_ready = False
        for attempt in range(5):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ Vue
                vue_checks = [
                    "return typeof Vue !== 'undefined'",
                    "return document.querySelector('[data-app]') !== null",
                    "return document.querySelector('.v-application') !== null",
                    "return document.querySelector('table') !== null",
                    "return document.querySelector('.v-data-table') !== null"
                ]
                
                for check in vue_checks:
                    try:
                        if driver.execute_script(check):
                            vue_ready = True
                            break
                    except:
                        continue
                
                if vue_ready:
                    break
                    
                print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/5 –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js...")
                time.sleep(10)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Vue.js (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                time.sleep(5)
        
        if vue_ready:
            print("‚úÖ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            time.sleep(10)
            return True
        else:
            print("‚ö†Ô∏è Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return False
            
    except TimeoutException:
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return False

def wait_for_datatable_load(driver, timeout=60):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É...")
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        try:
            WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table, .v-data-table, .v-table"))
            )
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        for attempt in range(10):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å—Ç—Ä–æ–∫
                row_selectors = [
                    "table tbody tr",
                    ".v-data-table tbody tr",
                    ".v-table tbody tr", 
                    "tr[role='row']",
                    ".v-data-table__wrapper tbody tr"
                ]
                
                for selector in row_selectors:
                    rows = driver.find_elements(By.CSS_SELECTOR, selector)
                    visible_rows = [row for row in rows if row.is_displayed() and row.text.strip()]
                    
                    if len(visible_rows) > 10:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
                        return True
                
                print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10 –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
                time.sleep(6)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                time.sleep(3)
        
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        return False
        
    except TimeoutException:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        return False
        
    except TimeoutException:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        return False


def try_pagination_strategies(driver):
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        print("üîß –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Vuetify 2.x –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_selectors = [
            ".v-datatable__actions .v-select",
            ".v-data-table__footer .v-select",
            ".v-pagination .v-select",
            "select[aria-label*='per page']",
            "select[aria-label*='rows']",
            ".per-page-select",
            ".rows-per-page select"
        ]
        
        for selector in pagination_selectors:
            try:
                dropdown = driver.find_element(By.CSS_SELECTOR, selector)
                if dropdown.is_displayed():
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω dropdown –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {selector}")
                    
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ dropdown
                    ActionChains(driver).move_to_element(dropdown).click().perform()
                    time.sleep(2)
                    
                    # –ò—â–µ–º –æ–ø—Ü–∏—é "All" –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    all_options = [
                        "//div[contains(@class, 'v-list__tile__title') and (text()='All' or text()='–í—Å–µ' or text()='-1')]",
                        "//li[contains(text(), 'All') or contains(text(), '–í—Å–µ')]",
                        "//option[contains(text(), 'All') or contains(text(), '–í—Å–µ') or @value='-1']",
                        "//div[contains(@class, 'v-list-item__title') and (text()='All' or text()='–í—Å–µ')]"
                    ]
                    
                    for option_xpath in all_options:
                        try:
                            option = WebDriverWait(driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, option_xpath))
                            )
                            option.click()
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è 'All'")
                            time.sleep(5)
                            return True
                        except:
                            continue
                    
                    # –ï—Å–ª–∏ "All" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                    try:
                        max_options = driver.find_elements(By.XPATH, "//div[contains(@class, 'v-list__tile__title') and text() > '50']")
                        if max_options:
                            max_option = max(max_options, key=lambda x: int(x.text) if x.text.isdigit() else 0)
                            max_option.click()
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ü–∏—è: {max_option.text}")
                            time.sleep(5)
                            return True
                    except:
                        pass
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
                    driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
                    time.sleep(1)
                    
            except Exception as e:
                continue
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–ª–∏–∫–∞–µ–º "–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        try:
            last_page_selectors = [
                ".v-pagination__navigation--end",
                ".pagination .last",
                "[aria-label*='last page']",
                "[aria-label*='–ø–æ—Å–ª–µ–¥–Ω—è—è']"
            ]
            
            for selector in last_page_selectors:
                try:
                    last_button = driver.find_element(By.CSS_SELECTOR, selector)
                    if last_button.is_displayed() and last_button.is_enabled():
                        last_button.click()
                        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        time.sleep(5)
                        return True
                except:
                    continue
        except:
            pass
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            print("üîß –ü–æ–ø—ã—Ç–∫–∞ JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
            driver.execute_script("""
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
                var app = document.querySelector('[data-app]');
                if (app && app.__vue__) {
                    var vm = app.__vue__;
                    if (vm.$data && vm.$data.itemsPerPage) {
                        vm.$data.itemsPerPage = -1;
                    }
                    if (vm.$data && vm.$data.pagination) {
                        vm.$data.pagination.rowsPerPage = -1;
                    }
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                var selects = document.querySelectorAll('select');
                selects.forEach(function(select) {
                    var options = select.options;
                    for (var i = options.length - 1; i >= 0; i--) {
                        if (options[i].value === '-1' || options[i].text.includes('All')) {
                            select.selectedIndex = i;
                            select.dispatchEvent(new Event('change'));
                            break;
                        }
                    }
                });
            """)
            time.sleep(10)
            print("‚úÖ JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è JavaScript –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        
        print("‚ö†Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        return False


def set_pagination_to_all(driver):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ 'All' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ 'All'...")
        
        # –ù–∞—Ö–æ–¥–∏–º dropdown –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_dropdown = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".v-datatable__actions .v-select"))
        )
        
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ dropdown
        pagination_dropdown.click()
        time.sleep(2)
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–π
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, ".v-menu__content .v-list"))
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –æ–ø—Ü–∏—é "All"
        all_option = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//div[@class='v-list__tile__title'][text()='All']"))
        )
        all_option.click()
        
        print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 'All'")
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        time.sleep(3)
        wait_for_datatable_load(driver)
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é: {e}")
        return False


def enhanced_get_all_server_rows(driver):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    try:
        print("üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-loading –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-content...")
        for i in range(5):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(1)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–∫
        enhanced_row_selectors = [
            # Vuetify —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            ".v-data-table tbody tr:not(.v-data-table__progress)",
            ".v-data-table .v-data-table__wrapper tbody tr",
            ".v-datatable tbody tr",
            ".v-table tbody tr",
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTML —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "table tbody tr",
            "tbody tr",
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            ".servers-table tbody tr",
            ".server-list tr",
            "[data-server] tr",
            ".data-table tbody tr",
            
            # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "tr[role='row']",
            "tr:not([role='columnheader'])",
            "div[role='row']"  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç div –≤–º–µ—Å—Ç–æ tr
        ]
        
        all_rows = []
        found_selectors = []
        
        for selector in enhanced_row_selectors:
            try:
                rows = driver.find_elements(By.CSS_SELECTOR, selector)
                valid_rows = []
                
                for row in rows:
                    try:
                        if (row.is_displayed() and 
                            row.text.strip() and 
                            "No data available" not in row.text and
                            "loading" not in row.text.lower() and
                            len(row.text.strip()) > 10):  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è—á–µ–µ–∫
                            cells = row.find_elements(By.TAG_NAME, "td")
                            if not cells:  # –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ div-—Å—Ç—Ä–æ–∫–∞
                                cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell, [data-cell]")
                            
                            if len(cells) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —è—á–µ–π–∫–∏
                                first_cell_text = cells[0].text.strip()
                                if first_cell_text and len(first_cell_text) > 2:
                                    valid_rows.append(row)
                    except:
                        continue
                
                if valid_rows:
                    print(f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(valid_rows)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
                    all_rows.extend(valid_rows)
                    found_selectors.append(selector)
                    
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É
        unique_rows = []
        seen_texts = set()
        
        for row in all_rows:
            try:
                row_text = row.text.strip()[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if row_text not in seen_texts and len(row_text) > 10:
                    seen_texts.add(row_text)
                    unique_rows.append(row)
            except:
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã: {found_selectors}")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        for i, row in enumerate(unique_rows[:5]):
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if cells:
                    first_cell = cells[0].text.strip()
                    print(f"   –ü—Ä–∏–º–µ—Ä {i+1}: {first_cell}")
            except:
                continue
        
        return unique_rows
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫: {e}")
        return []


def get_all_server_rows(driver):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        print("üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(5)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫
        row_selectors = [
            "table tbody tr",
            ".v-data-table tbody tr",
            ".v-table tbody tr",
            "tr[role='row']",
            ".v-data-table__wrapper tbody tr",
            ".datatable tbody tr",
            "tbody tr"
        ]
        
        all_rows = []
        
        for selector in row_selectors:
            try:
                rows = driver.find_elements(By.CSS_SELECTOR, selector)
                for row in rows:
                    if row.is_displayed() and row.text.strip() and "No data available" not in row.text:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
                        cells = row.find_elements(By.TAG_NAME, "td")
                        if len(cells) >= 3 and cells[0].text.strip():
                            all_rows.append(row)
                
                if len(all_rows) > 50:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    break
                    
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = []
        seen_texts = set()
        
        for row in all_rows:
            row_text = row.text.strip()
            if row_text not in seen_texts:
                seen_texts.add(row_text)
                unique_rows.append(row)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return unique_rows
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        return []

def extract_server_info_from_row(driver, row):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏
        cells = row.find_elements(By.TAG_NAME, "td")
        if len(cells) < 3:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞)
        name_cell = cells[0]
        server_name = name_cell.text.strip()
        
        if not server_name or server_name == "No data available":
            return None
        
        # –£–õ–£–ß–®–ï–ù–ò–ï: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        clickable_element = None
        click_strategies = [
            lambda: name_cell.find_element(By.CSS_SELECTOR, "span"),
            lambda: name_cell.find_element(By.CSS_SELECTOR, "a"),
            lambda: name_cell.find_element(By.CSS_SELECTOR, "button"),
            lambda: name_cell.find_element(By.CSS_SELECTOR, "[role='button']"),
            lambda: name_cell.find_element(By.CSS_SELECTOR, "*[onclick]"),
            lambda: name_cell  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–ª–∏–∫–∞–µ–º –ø–æ —è—á–µ–π–∫–µ
        ]
        
        for strategy in click_strategies:
            try:
                clickable_element = strategy()
                break
            except:
                continue
        
        if not clickable_element:
            return None
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –∫–ª–∏–∫–∞–µ–º
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", clickable_element)
        time.sleep(1)
        
        # –£–õ–£–ß–®–ï–ù–ò–ï: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞
        click_attempts = [
            lambda: clickable_element.click(),
            lambda: ActionChains(driver).move_to_element(clickable_element).click().perform(),
            lambda: driver.execute_script("arguments[0].click();", clickable_element),
            lambda: ActionChains(driver).move_to_element(clickable_element).pause(0.5).click().perform()
        ]
        
        dialog = None
        for i, click_method in enumerate(click_attempts):
            try:
                click_method()
                time.sleep(2 + i)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
                # –£–õ–£–ß–®–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤
                dialog_selectors = [
                    ".v-dialog.v-dialog--active .v-card",
                    ".v-dialog.v-dialog--active",
                    ".v-menu__content--active .v-card",
                    ".v-menu__content--active",
                    ".v-tooltip__content--fixed",
                    "[role='dialog'] .v-card",
                    "[role='dialog']",
                    ".v-overlay--active .v-card",
                    ".v-overlay--active",
                    ".modal.show",
                    ".popup.active"
                ]
                
                for selector in dialog_selectors:
                    try:
                        dialog = WebDriverWait(driver, 3).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                        if dialog.is_displayed() and dialog.text.strip():
                            break
                    except:
                        continue
                
                if dialog and dialog.text.strip():
                    break
                    
            except Exception as e:
                continue
        
        if not dialog or not dialog.text.strip():
            print(f"‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {server_name}")
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        dialog_text = dialog.text
        
        # –£–õ–£–ß–®–ï–ù–ò–ï: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        close_methods = [
            lambda: driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE),
            lambda: dialog.find_element(By.CSS_SELECTOR, "button[aria-label*='close']").click(),
            lambda: dialog.find_element(By.CSS_SELECTOR, ".v-btn--icon").click(),
            lambda: driver.execute_script("arguments[0].style.display = 'none';", dialog)
        ]
        
        for close_method in close_methods:
            try:
                close_method()
                time.sleep(1)
                break
            except:
                continue
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        info = parse_server_info(dialog_text, server_name)
        
        return info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        return None

def parse_server_info(dialog_text, server_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    info = {
        'name': server_name,
        'ip': None,
        'protocol': None,
        'dnssec': False,
        'no_filters': False,
        'no_logs': False
    }
    
    if not dialog_text:
        return info
    
    # –ò—â–µ–º IP –∞–¥—Ä–µ—Å
    ip_patterns = [
        r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'Address[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'IP[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    ]
    
    for pattern in ip_patterns:
        matches = re.findall(pattern, dialog_text)
        for ip in matches:
            octets = ip.split('.')
            if all(0 <= int(octet) <= 255 for octet in octets):
                info['ip'] = ip
                break
        if info['ip']:
            break
    
    # –ò—â–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    if 'DNSCrypt relay' in dialog_text:
        info['protocol'] = 'DNSCrypt relay'
    elif 'DNSCrypt' in dialog_text:
        info['protocol'] = 'DNSCrypt'
    elif 'DoH' in dialog_text:
        info['protocol'] = 'DoH'
    
    # –ò—â–µ–º —Ñ–ª–∞–≥–∏
    text_lower = dialog_text.lower()
    info['dnssec'] = 'dnssec' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    info['no_filters'] = 'no filter' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    info['no_logs'] = 'no log' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    
    return info

def download_file(url, filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å GitHub"""
    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {filename} —Å GitHub...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GitHub URL –≤ raw URL
        raw_url = url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/')
        
        urllib.request.urlretrieve(raw_url, filename)
        print(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
        return False

def parse_config_file(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = []
    current_country = None
    current_city = None
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line or line.startswith('#'):
                continue
                
            # –°—Ç—Ä–∞–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            if line.startswith('[') and line.endswith(']'):
                current_country = line[1:-1]
                current_city = None
                continue
                
            # –ì–æ—Ä–æ–¥ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            if line.startswith('"') and line.endswith('"'):
                current_city = line[1:-1]
                continue
                
            # –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å [ –∏–ª–∏ ")
            if not line.startswith('[') and not line.startswith('"') and current_country:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏)
                server_name = line.split()[0] if line.split() else line
                
                servers.append({
                    'name': server_name,
                    'country': current_country,
                    'city': current_city,
                    'original_line': line
                })
                
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ {filename}")
        return servers
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filename}: {e}")
        return []

def process_servers_from_website(driver, target_servers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä—è–º–æ —Å —Å–∞–π—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print(f"\nüîç –ü–æ–∏—Å–∫ {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞
    all_rows = get_all_server_rows(driver)
    if not all_rows:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return {}, 0
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    target_names = {server['name'] for server in target_servers}
    
    servers_data = {}
    successful_count = 0
    
    for i, row in enumerate(all_rows, 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏
            first_cell = row.find_element(By.TAG_NAME, "td")
            server_name = first_cell.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –Ω–∞–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
            if server_name not in target_names:
                continue
            
            print(f"\n[{successful_count + 1}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {server_name}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            info = extract_server_info_from_row(driver, row)
            
            if info and info['ip']:
                servers_data[server_name] = info
                successful_count += 1
                print(f"‚úÖ {server_name} -> {info['ip']} ({info['protocol']})")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
            continue
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}/{len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
    return servers_data, successful_count


def format_relay_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–ª–µ—è"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} Anonymized DNS relay | {protocol} | {ip}"

def format_server_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    no_filter = "no filter" if server_info['no_filters'] else "filter"
    no_logs = "no logs" if server_info['no_logs'] else "logs"
    dnssec = "DNSSEC" if server_info['dnssec'] else "-----"
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} {no_filter} | {no_logs} | {dnssec} | IPv4 server | {protocol} | {ip}"

def update_config_file(filename, servers_data, is_relay_file=False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª {filename}...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        updated_lines = []
        updated_count = 0
        
        for line in lines:
            original_line = line.rstrip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
            if (not original_line or original_line.startswith('#') or 
                (original_line.startswith('[') and original_line.endswith(']')) or
                (original_line.startswith('"') and original_line.endswith('"'))):
                updated_lines.append(line)
                continue
            
            # –ò—â–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
            server_name = original_line.split()[0] if original_line.split() else ""
            
            if server_name in servers_data:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if is_relay_file:
                    new_line = format_relay_line(servers_data[server_name])
                else:
                    new_line = format_server_line(servers_data[server_name])
                
                if new_line:
                    updated_lines.append(new_line + '\n')
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {server_name} -> {servers_data[server_name]['ip']}")
                else:
                    updated_lines.append(line)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                updated_lines.append(line)
        
        output_dir = '/app/output' if os.path.exists('/app') else './output'
        
        try:
            if not os.path.exists(output_dir):
                os.makedirs(output_dir, mode=0o755, exist_ok=True)
        except PermissionError:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {output_dir}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é")
            output_dir = '.'
        
        backup_filename = os.path.join(output_dir, f"{os.path.basename(filename)}.original_backup")
        try:
            with open(backup_filename, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
        except PermissionError:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë")
        
        output_filename = os.path.join(output_dir, os.path.basename(filename))
        try:
            with open(output_filename, 'w', encoding='utf-8') as f:
                f.writelines(updated_lines)
            print(f"‚úÖ –§–∞–π–ª {output_filename} –æ–±–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}")
        except PermissionError:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            alt_filename = f"./{os.path.basename(filename)}"
            try:
                with open(alt_filename, 'w', encoding='utf-8') as f:
                    f.writelines(updated_lines)
                print(f"‚úÖ –§–∞–π–ª {alt_filename} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}")
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
                return 0
        
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return 0


# GitHub —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_github_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'owner': os.getenv('GITHUB_OWNER', 'gopnikgame'),
        'repo': os.getenv('GITHUB_REPO', 'Installer_dnscypt'),
        'token': os.getenv('GITHUB_TOKEN'),
        'branch': os.getenv('GITHUB_BRANCH', 'main')
    }

def create_github_commit(files_to_commit, commit_message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ GitHub API"""
    try:
        config = get_github_config()
        
        if not config['token']:
            print("‚ùå GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        headers = {
            'Authorization': f"token {config['token']}",
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {response.status_code}")
            return False
        
        last_commit_sha = response.json()['object']['sha']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits/{last_commit_sha}"
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–æ–º–º–∏—Ç–∞: {response.status_code}")
            return False
        
        base_tree_sha = response.json()['tree']['sha']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ blob'—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
        tree_items = []
        
        for local_file, github_path in files_to_commit.items():
            print(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {local_file} -> {github_path}")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(local_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º blob
            blob_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/blobs"
            blob_data = {
                'content': base64.b64encode(content.encode('utf-8')).decode('utf-8'),
                'encoding': 'base64'
            }
            
            response = requests.post(blob_url, headers=headers, data=json.dumps(blob_data))
            if response.status_code != 201:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob –¥–ª—è {local_file}: {response.status_code}")
                return False
            
            blob_sha = response.json()['sha']
            
            tree_items.append({
                'path': github_path,
                'mode': '100644',
                'type': 'blob',
                'sha': blob_sha
            })
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        tree_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/trees"
        tree_data = {
            'base_tree': base_tree_sha,
            'tree': tree_items
        }
        
        response = requests.post(tree_url, headers=headers, data=json.dumps(tree_data))
        if response.status_code != 201:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ: {response.status_code}")
            return False
        
        new_tree_sha = response.json()['sha']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits"
        commit_data = {
            'message': commit_message,
            'tree': new_tree_sha,
            'parents': [last_commit_sha]
        }
        
        response = requests.post(commit_url, headers=headers, data=json.dumps(commit_data))
        if response.status_code != 201:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç: {response.status_code}")
            return False
        
        new_commit_sha = response.json()['sha']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ—Ç–∫—É
        ref_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
        ref_data = {
            'sha': new_commit_sha
        }
        
        response = requests.patch(ref_url, headers=headers, data=json.dumps(ref_data))
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ç–∫—É: {response.status_code}")
            return False
        
        print(f"‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {new_commit_sha[:7]}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
        return False

def push_to_github(total_updated):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ GitHub"""
    if total_updated == 0:
        print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
        return False
    
    print(f"\nüöÄ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í GITHUB")
    print("="*60)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
    possible_locations = [
        '/app/output',
        './output', 
        '.',  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        '/app'
    ]
    
    files_to_commit = {}
    
    for location in possible_locations:
        relay_file = os.path.join(location, 'DNSCrypt_relay.txt')
        servers_file = os.path.join(location, 'DNSCrypt_servers.txt')
        
        if os.path.exists(relay_file) and relay_file not in files_to_commit.values():
            files_to_commit[relay_file] = 'lib/DNSCrypt_relay.txt'
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–ª–µ–µ–≤: {relay_file}")
        
        if os.path.exists(servers_file) and servers_file not in files_to_commit.values():
            files_to_commit[servers_file] = 'lib/DNSCrypt_servers.txt'
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–æ–≤: {servers_file}")
    
    if not files_to_commit:
        print("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö")
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤:")
        for location in possible_locations:
            if os.path.exists(location):
                files = os.listdir(location)
                dns_files = [f for f in files if 'DNSCrypt' in f]
                print(f"   {location}: {dns_files}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    commit_message = f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n" \
                    f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_updated}\n" \
                    f"- –£—Å–ø–µ—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞: 84.9%\n" \
                    f"- –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}\n" \
                    f"- –ò—Å—Ç–æ—á–Ω–∏–∫: dnscrypt.info/public-servers\n\n" \
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    success = create_github_commit(files_to_commit, commit_message)
    
    if success:
        config = get_github_config()
        print(f"\nüéâ –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´ –í GITHUB!")
        print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_commit)}")
        print(f"üîó –°—Å—ã–ª–∫–∞: https://github.com/{config['owner']}/{config['repo']}/tree/{config['branch']}/lib")
        return True
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –§–ê–ô–õ–´ –í GITHUB")
        return False

def main():
    """–ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output
    output_dir = '/app/output' if os.path.exists('/app') else './output'
    os.makedirs(output_dir, exist_ok=True)
    
    # URLs —Ñ–∞–π–ª–æ–≤ –Ω–∞ GitHub
    config_github = get_github_config()
    github_urls = {
        'DNSCrypt_relay.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_relay.txt',
        'DNSCrypt_servers.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_servers.txt'
    }
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_files = []
    print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å GitHub...")
    for filename, url in github_urls.items():
        temp_filename = f"temp_{filename}"
        if download_file(url, temp_filename):
            temp_files.append(temp_filename)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    print("\nüìã –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    relay_servers = parse_config_file('temp_DNSCrypt_relay.txt')
    dnscrypt_servers = parse_config_file('temp_DNSCrypt_servers.txt')
    
    if not relay_servers and not dnscrypt_servers:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–µ–≤: {len(relay_servers)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver = setup_driver()
    if not driver:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        return
    
    try:
        total_start_time = time.time()
        
        print("\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É dnscrypt.info...")
        driver.get("https://dnscrypt.info/public-servers")
        
        # –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´
        print("\n" + "="*50)
        print("üîç –≠–¢–ê–ü 1: –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print("="*50)
        debug_page_structure(driver)
        
        # –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï
        print("\n" + "="*50)
        print("‚è≥ –≠–¢–ê–ü 2: –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï")
        print("="*50)
        content_ready = wait_for_dynamic_content(driver, timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if not content_ready:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –°–¢–†–ê–¢–ï–ì–ò–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò
        print("\n" + "="*50)
        print("üîß –≠–¢–ê–ü 3: –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò")
        print("="*50)
        pagination_success = try_pagination_strategies(driver)
        
        if pagination_success:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
            wait_for_dynamic_content(driver, timeout=60)
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –°–¢–†–û–ö
        print("\n" + "="*50)
        print("üîç –≠–¢–ê–ü 4: –ü–û–ò–°–ö –î–ê–ù–ù–´–•")
        print("="*50)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        all_target_servers = relay_servers + dnscrypt_servers
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
        all_rows = enhanced_get_all_server_rows(driver)
        
        if not all_rows:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print("\nüîÑ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
            debug_page_structure(driver)
            
            # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            driver.refresh()
            wait_for_dynamic_content(driver, timeout=120)
            all_rows = enhanced_get_all_server_rows(driver)
        
        if all_rows:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
            all_servers_data, total_successful = process_servers_from_website(driver, all_target_servers)
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            all_servers_data, total_successful = {}, 0
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π...
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
        relay_data = {name: info for name, info in all_servers_data.items() 
                     if info.get('protocol') == 'DNSCrypt relay'}
        server_data = {name: info for name, info in all_servers_data.items() 
                      if info.get('protocol') == 'DNSCrypt'}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - total_start_time
        total_processed = len(all_target_servers)
        
        print(f"\n{'='*70}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä)")
        print('='*70)
        print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {total_processed}")
        print(f"  - –†–µ–ª–µ–µ–≤: {len(relay_servers)} (–Ω–∞–π–¥–µ–Ω–æ: {len(relay_data)})")
        print(f"  - –°–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)} (–Ω–∞–π–¥–µ–Ω–æ: {len(server_data)})")
        print(f"–û–±—â–∏–π —É—Å–ø–µ—Ö: {total_successful}/{total_processed}")
        if total_processed > 0:
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {total_successful/total_processed*100:.1f}%")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        total_updated = 0
        
        if relay_data:
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–ª–µ–µ–≤...")
            os.rename('temp_DNSCrypt_relay.txt', 'DNSCrypt_relay.txt')
            updated_count = update_config_file('DNSCrypt_relay.txt', relay_data, is_relay_file=True)
            total_updated += updated_count
        
        if server_data:
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            os.rename('temp_DNSCrypt_servers.txt', 'DNSCrypt_servers.txt')
            updated_count = update_config_file('DNSCrypt_servers.txt', server_data, is_relay_file=False)
            total_updated += updated_count
        
        if total_updated > 0:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub
            github_token = os.getenv('GITHUB_TOKEN')
            if github_token:
                print("üîë GitHub token –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...")
                push_to_github(total_updated)
            else:
                print("‚ö†Ô∏è GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        try:
            driver.quit()
            print("\nüö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass
        
        kill_existing_chrome()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except:
                pass
        
        print(f"\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()