# –ó–∞–¥–∞—á–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ https://dnscrypt.info/public-servers
# –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ GitHub
# –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å IPv4 –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ DNSCrypt/DNSCrypt relay

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
import re
import time
import subprocess
import urllib.request
import os
import requests
import base64
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

def get_default_chrome_options():
    """–ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ Chrome –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage") 
    options.add_argument("--disable-extensions")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # Headless —Ä–µ–∂–∏–º
    if os.getenv('CHROME_HEADLESS', 'true').lower() == 'true':
        options.add_argument("--headless")
    
    return options

def kill_existing_chrome():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        subprocess.run(['pkill', '-f', 'chrome'], check=False)
        subprocess.run(['pkill', '-f', 'chromium'], check=False)
        time.sleep(2)
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome: {e}")

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome –¥–ª—è Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    kill_existing_chrome()
    
    try:
        options = get_default_chrome_options()
        driver = webdriver.Chrome(options=options)
        
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ WebDriver
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è Vue.js")
        return driver
        
    except WebDriverException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {str(e)}")
        return None

def wait_for_vue_app_ready(driver, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "[data-app='true']"))
        )
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return typeof Vue !== 'undefined'")
        )
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        WebDriverWait(driver, timeout).until_not(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".v-progress-linear__bar__indeterminate--active"))
        )
        
        print("‚úÖ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        return True
        
    except TimeoutException:
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return False

def wait_for_datatable_load(driver, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ v-datatable"""
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É...")
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç "No data available"
        WebDriverWait(driver, timeout).until_not(
            EC.text_to_be_present_in_element(
                (By.CSS_SELECTOR, ".v-datatable tbody td"), 
                "No data available"
            )
        )
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".v-datatable tbody tr:not(.v-datatable__progress)"))
        )
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except TimeoutException:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        return False

def set_pagination_to_all(driver):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ 'All' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ 'All'...")
        
        # –ù–∞—Ö–æ–¥–∏–º dropdown –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_dropdown = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".v-datatable__actions .v-select"))
        )
        
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ dropdown
        pagination_dropdown.click()
        time.sleep(2)
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–π
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, ".v-menu__content .v-list"))
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –æ–ø—Ü–∏—é "All"
        all_option = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//div[@class='v-list__tile__title'][text()='All']"))
        )
        all_option.click()
        
        print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 'All'")
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        time.sleep(3)
        wait_for_datatable_load(driver)
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é: {e}")
        return False

def get_all_server_rows(driver):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å)
        rows = driver.find_elements(
            By.CSS_SELECTOR, 
            ".v-datatable tbody tr:not(.v-datatable__progress)"
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return rows
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        return []

def extract_server_info_from_row(driver, row):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏
        cells = row.find_elements(By.TAG_NAME, "td")
        if len(cells) < 3:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞)
        name_cell = cells[0]
        server_name = name_cell.text.strip()
        
        if not server_name or server_name == "No data available":
            return None
        
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        name_element = name_cell.find_element(By.CSS_SELECTOR, "span, a, button, *")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –∫–ª–∏–∫–∞–µ–º
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", name_element)
        time.sleep(1)
        
        ActionChains(driver).move_to_element(name_element).click().perform()
        time.sleep(2)
        
        # –ò—â–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
        dialog = None
        dialog_selectors = [
            ".v-dialog.v-dialog--active",
            ".v-menu__content--active",
            ".v-tooltip__content--fixed",
            "[role='dialog']"
        ]
        
        for selector in dialog_selectors:
            try:
                dialog = WebDriverWait(driver, 3).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                if dialog.is_displayed():
                    break
            except:
                continue
        
        if not dialog:
            print(f"‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {server_name}")
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        dialog_text = dialog.text
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        try:
            driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
            time.sleep(1)
        except:
            pass
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        info = parse_server_info(dialog_text, server_name)
        
        return info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        return None

def parse_server_info(dialog_text, server_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    info = {
        'name': server_name,
        'ip': None,
        'protocol': None,
        'dnssec': False,
        'no_filters': False,
        'no_logs': False
    }
    
    if not dialog_text:
        return info
    
    # –ò—â–µ–º IP –∞–¥—Ä–µ—Å
    ip_patterns = [
        r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'Address[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
        r'IP[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    ]
    
    for pattern in ip_patterns:
        matches = re.findall(pattern, dialog_text)
        for ip in matches:
            octets = ip.split('.')
            if all(0 <= int(octet) <= 255 for octet in octets):
                info['ip'] = ip
                break
        if info['ip']:
            break
    
    # –ò—â–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    if 'DNSCrypt relay' in dialog_text:
        info['protocol'] = 'DNSCrypt relay'
    elif 'DNSCrypt' in dialog_text:
        info['protocol'] = 'DNSCrypt'
    elif 'DoH' in dialog_text:
        info['protocol'] = 'DoH'
    
    # –ò—â–µ–º —Ñ–ª–∞–≥–∏
    text_lower = dialog_text.lower()
    info['dnssec'] = 'dnssec' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    info['no_filters'] = 'no filter' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    info['no_logs'] = 'no log' in text_lower and ('true' in text_lower or 'yes' in text_lower)
    
    return info

def download_file(url, filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å GitHub"""
    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {filename} —Å GitHub...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GitHub URL –≤ raw URL
        raw_url = url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/')
        
        urllib.request.urlretrieve(raw_url, filename)
        print(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
        return False

def parse_config_file(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = []
    current_country = None
    current_city = None
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line or line.startswith('#'):
                continue
                
            # –°—Ç—Ä–∞–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            if line.startswith('[') and line.endswith(']'):
                current_country = line[1:-1]
                current_city = None
                continue
                
            # –ì–æ—Ä–æ–¥ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            if line.startswith('"') and line.endswith('"'):
                current_city = line[1:-1]
                continue
                
            # –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å [ –∏–ª–∏ ")
            if not line.startswith('[') and not line.startswith('"') and current_country:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏)
                server_name = line.split()[0] if line.split() else line
                
                servers.append({
                    'name': server_name,
                    'country': current_country,
                    'city': current_city,
                    'original_line': line
                })
                
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ {filename}")
        return servers
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filename}: {e}")
        return []

def process_servers_from_website(driver, target_servers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä—è–º–æ —Å —Å–∞–π—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print(f"\nüîç –ü–æ–∏—Å–∫ {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞
    all_rows = get_all_server_rows(driver)
    if not all_rows:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return {}, 0
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    target_names = {server['name'] for server in target_servers}
    
    servers_data = {}
    successful_count = 0
    
    for i, row in enumerate(all_rows, 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏
            first_cell = row.find_element(By.TAG_NAME, "td")
            server_name = first_cell.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –Ω–∞–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
            if server_name not in target_names:
                continue
            
            print(f"\n[{successful_count + 1}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {server_name}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            info = extract_server_info_from_row(driver, row)
            
            if info and info['ip']:
                servers_data[server_name] = info
                successful_count += 1
                print(f"‚úÖ {server_name} -> {info['ip']} ({info['protocol']})")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
            continue
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}/{len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
    return servers_data, successful_count

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (format_relay_line, format_server_line, update_config_file, GitHub —Ñ—É–Ω–∫—Ü–∏–∏)

def format_relay_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–ª–µ—è"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} Anonymized DNS relay | {protocol} | {ip}"

def format_server_line(server_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not server_info['ip']:
        return None
    
    name = server_info['name']
    no_filter = "no filter" if server_info['no_filters'] else "filter"
    no_logs = "no logs" if server_info['no_logs'] else "logs"
    dnssec = "DNSSEC" if server_info['dnssec'] else "-----"
    protocol = server_info['protocol']
    ip = server_info['ip']
    
    return f"{name:<30} {no_filter} | {no_logs} | {dnssec} | IPv4 server | {protocol} | {ip}"

def update_config_file(filename, servers_data, is_relay_file=False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª {filename}...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        updated_lines = []
        updated_count = 0
        
        for line in lines:
            original_line = line.rstrip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
            if (not original_line or original_line.startswith('#') or 
                (original_line.startswith('[') and original_line.endswith(']')) or
                (original_line.startswith('"') and original_line.endswith('"'))):
                updated_lines.append(line)
                continue
            
            # –ò—â–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
            server_name = original_line.split()[0] if original_line.split() else ""
            
            if server_name in servers_data:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if is_relay_file:
                    new_line = format_relay_line(servers_data[server_name])
                else:
                    new_line = format_server_line(servers_data[server_name])
                
                if new_line:
                    updated_lines.append(new_line + '\n')
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {server_name} -> {servers_data[server_name]['ip']}")
                else:
                    updated_lines.append(line)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                updated_lines.append(line)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = '/app/output' if os.path.exists('/app') else './output'
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û —Ñ–∞–π–ª–∞
        backup_filename = os.path.join(output_dir, f"{os.path.basename(filename)}.original_backup")
        try:
            with open(backup_filename, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ output
        output_filename = os.path.join(output_dir, os.path.basename(filename))
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.writelines(updated_lines)
        
        print(f"‚úÖ –§–∞–π–ª {output_filename} –æ–±–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}")
        
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return 0

# GitHub —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_github_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'owner': os.getenv('GITHUB_OWNER', 'gopnikgame'),
        'repo': os.getenv('GITHUB_REPO', 'Installer_dnscypt'),
        'token': os.getenv('GITHUB_TOKEN'),
        'branch': os.getenv('GITHUB_BRANCH', 'main')
    }

def create_github_commit(files_to_commit, commit_message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ GitHub API"""
    try:
        config = get_github_config()
        
        if not config['token']:
            print("‚ùå GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        headers = {
            'Authorization': f"token {config['token']}",
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {response.status_code}")
            return False
        
        last_commit_sha = response.json()['object']['sha']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits/{last_commit_sha}"
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–æ–º–º–∏—Ç–∞: {response.status_code}")
            return False
        
        base_tree_sha = response.json()['tree']['sha']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ blob'—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
        tree_items = []
        
        for local_file, github_path in files_to_commit.items():
            print(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {local_file} -> {github_path}")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(local_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º blob
            blob_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/blobs"
            blob_data = {
                'content': base64.b64encode(content.encode('utf-8')).decode('utf-8'),
                'encoding': 'base64'
            }
            
            response = requests.post(blob_url, headers=headers, data=json.dumps(blob_data))
            if response.status_code != 201:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob –¥–ª—è {local_file}: {response.status_code}")
                return False
            
            blob_sha = response.json()['sha']
            
            tree_items.append({
                'path': github_path,
                'mode': '100644',
                'type': 'blob',
                'sha': blob_sha
            })
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        tree_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/trees"
        tree_data = {
            'base_tree': base_tree_sha,
            'tree': tree_items
        }
        
        response = requests.post(tree_url, headers=headers, data=json.dumps(tree_data))
        if response.status_code != 201:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ: {response.status_code}")
            return False
        
        new_tree_sha = response.json()['sha']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits"
        commit_data = {
            'message': commit_message,
            'tree': new_tree_sha,
            'parents': [last_commit_sha]
        }
        
        response = requests.post(commit_url, headers=headers, data=json.dumps(commit_data))
        if response.status_code != 201:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç: {response.status_code}")
            return False
        
        new_commit_sha = response.json()['sha']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ—Ç–∫—É
        ref_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
        ref_data = {
            'sha': new_commit_sha
        }
        
        response = requests.patch(ref_url, headers=headers, data=json.dumps(ref_data))
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ç–∫—É: {response.status_code}")
            return False
        
        print(f"‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {new_commit_sha[:7]}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
        return False

def push_to_github(total_updated):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ GitHub"""
    if total_updated == 0:
        print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
        return False
    
    print(f"\nüöÄ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í GITHUB")
    print("="*60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    output_dir = '/app/output' if os.path.exists('/app') else './output'
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    files_to_commit = {}
    
    relay_file = os.path.join(output_dir, 'DNSCrypt_relay.txt')
    if os.path.exists(relay_file):
        files_to_commit[relay_file] = 'lib/DNSCrypt_relay.txt'
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–º–∏—Ç: DNSCrypt_relay.txt")
    
    servers_file = os.path.join(output_dir, 'DNSCrypt_servers.txt')
    if os.path.exists(servers_file):
        files_to_commit[servers_file] = 'lib/DNSCrypt_servers.txt'
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–º–∏—Ç: DNSCrypt_servers.txt")
    
    if not files_to_commit:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    commit_message = f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤ (Vue.js –ø–∞—Ä—Å–µ—Ä)\n\n" \
                    f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_updated}\n" \
                    f"- –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}\n" \
                    f"- –ò—Å—Ç–æ—á–Ω–∏–∫: dnscrypt.info/public-servers\n" \
                    f"- –í–µ—Ä—Å–∏—è: –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–ª—è Vue.js\n\n" \
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–º"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    success = create_github_commit(files_to_commit, commit_message)
    
    if success:
        config = get_github_config()
        print(f"\nüéâ –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´ –í GITHUB!")
        print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_commit)}")
        print(f"üîó –°—Å—ã–ª–∫–∞: https://github.com/{config['owner']}/{config['repo']}/tree/{config['branch']}/lib")
        return True
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –§–ê–ô–õ–´ –í GITHUB")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Vue.js"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤ (Vue.js)")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output
    output_dir = '/app/output' if os.path.exists('/app') else './output'
    os.makedirs(output_dir, exist_ok=True)
    
    # URLs —Ñ–∞–π–ª–æ–≤ –Ω–∞ GitHub
    config_github = get_github_config()
    github_urls = {
        'DNSCrypt_relay.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_relay.txt',
        'DNSCrypt_servers.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_servers.txt'
    }
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_files = []
    print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å GitHub...")
    for filename, url in github_urls.items():
        temp_filename = f"temp_{filename}"
        if download_file(url, temp_filename):
            temp_files.append(temp_filename)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    print("\nüìã –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    relay_servers = parse_config_file('temp_DNSCrypt_relay.txt')
    dnscrypt_servers = parse_config_file('temp_DNSCrypt_servers.txt')
    
    if not relay_servers and not dnscrypt_servers:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–µ–≤: {len(relay_servers)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver = setup_driver()
    if not driver:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        return
    
    try:
        total_start_time = time.time()
        
        print("\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É dnscrypt.info...")
        driver.get("https://dnscrypt.info/public-servers")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not wait_for_vue_app_ready(driver):
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π Vue.js...")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
        if not wait_for_datatable_load(driver):
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞ "All"
        set_pagination_to_all(driver)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        all_target_servers = relay_servers + dnscrypt_servers
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Å —Å–∞–π—Ç–∞
        all_servers_data, total_successful = process_servers_from_website(driver, all_target_servers)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
        relay_data = {name: info for name, info in all_servers_data.items() 
                     if info['protocol'] == 'DNSCrypt relay'}
        server_data = {name: info for name, info in all_servers_data.items() 
                      if info['protocol'] == 'DNSCrypt'}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        total_time = time.time() - total_start_time
        total_processed = len(all_target_servers)
        
        print(f"\n{'='*70}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (Vue.js –ø–∞—Ä—Å–µ—Ä)")
        print('='*70)
        print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {total_processed}")
        print(f"  - –†–µ–ª–µ–µ–≤: {len(relay_servers)} (–Ω–∞–π–¥–µ–Ω–æ: {len(relay_data)})")
        print(f"  - –°–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)} (–Ω–∞–π–¥–µ–Ω–æ: {len(server_data)})")
        print(f"–û–±—â–∏–π —É—Å–ø–µ—Ö: {total_successful}/{total_processed}")
        if total_processed > 0:
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {total_successful/total_processed*100:.1f}%")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        total_updated = 0
        
        if relay_data:
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–ª–µ–µ–≤...")
            os.rename('temp_DNSCrypt_relay.txt', 'DNSCrypt_relay.txt')
            updated_count = update_config_file('DNSCrypt_relay.txt', relay_data, is_relay_file=True)
            total_updated += updated_count
        
        if server_data:
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            os.rename('temp_DNSCrypt_servers.txt', 'DNSCrypt_servers.txt')
            updated_count = update_config_file('DNSCrypt_servers.txt', server_data, is_relay_file=False)
            total_updated += updated_count
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if total_updated > 0:
            report_file = os.path.join(output_dir, "update_report.txt")
            with open(report_file, "w", encoding="utf-8") as f:
                f.write("# –û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤ - Vue.js –ø–∞—Ä—Å–µ—Ä\n")
                f.write(f"# –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å\n\n")
                f.write(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}\n\n")
                
                if relay_data:
                    f.write("–†–ï–õ–ï–ò:\n")
                    for name, info in relay_data.items():
                        f.write(f"{name:<30} -> {info['ip']} ({info['protocol']})\n")
                    f.write("\n")
                
                if server_data:
                    f.write("–°–ï–†–í–ï–†–´:\n")
                    for name, info in server_data.items():
                        f.write(f"{name:<30} -> {info['ip']} ({info['protocol']})\n")
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
            print(f"\nüéâ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ {output_dir}:")
            print(f"   - DNSCrypt_relay.txt ({len(relay_data)} —Ä–µ–ª–µ–µ–≤)")
            print(f"   - DNSCrypt_servers.txt ({len(server_data)} —Å–µ—Ä–≤–µ—Ä–æ–≤)")
            print(f"   - update_report.txt (–æ—Ç—á–µ—Ç)")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub
            print(f"\n{'='*70}")
            print("üöÄ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í GITHUB")
            print('='*70)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            github_token = os.getenv('GITHUB_TOKEN')
            if not github_token:
                print("‚ö†Ô∏è GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            else:
                print("üîë GitHub token –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...")
                push_to_github(total_updated)
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        try:
            driver.quit()
            print("\nüö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass
        
        kill_existing_chrome()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {temp_file}: {e}")
        
        print("\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! (Vue.js –≤–µ—Ä—Å–∏—è)")
        config_github = get_github_config()
        print(f"üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/{config_github['owner']}/{config_github['repo']}")

if __name__ == "__main__":
    main()