"""
–ú–µ–Ω–µ–¥–∂–µ—Ä GitHub –æ–ø–µ—Ä–∞—Ü–∏–π
"""
import os
import time
import base64
import json
import requests
from typing import Dict, Any

class GitHubManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub API"""
    
    def get_config(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GitHub –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return {
            'owner': os.getenv('GITHUB_OWNER', 'gopnikgame'),
            'repo': os.getenv('GITHUB_REPO', 'Installer_dnscypt'),
            'token': os.getenv('GITHUB_TOKEN'),
            'branch': os.getenv('GITHUB_BRANCH', 'main')
        }
    
    def create_github_commit(self, files_to_commit: Dict[str, str], commit_message: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ GitHub API"""
        try:
            config = self.get_config()
            
            if not config['token']:
                print("‚ùå GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            headers = {
                'Authorization': f"token {config['token']}",
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {response.status_code}")
                return False
            
            last_commit_sha = response.json()['object']['sha']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits/{last_commit_sha}"
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–æ–º–º–∏—Ç–∞: {response.status_code}")
                return False
            
            base_tree_sha = response.json()['tree']['sha']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ blob'—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
            tree_items = []
            
            for local_file, github_path in files_to_commit.items():
                print(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {local_file} -> {github_path}")
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                with open(local_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –°–æ–∑–¥–∞–µ–º blob
                blob_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/blobs"
                blob_data = {
                    'content': base64.b64encode(content.encode('utf-8')).decode('utf-8'),
                    'encoding': 'base64'
                }
                
                response = requests.post(blob_url, headers=headers, data=json.dumps(blob_data))
                if response.status_code != 201:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob –¥–ª—è {local_file}: {response.status_code}")
                    return False
                
                blob_sha = response.json()['sha']
                
                tree_items.append({
                    'path': github_path,
                    'mode': '100644',
                    'type': 'blob',
                    'sha': blob_sha
                })
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
            tree_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/trees"
            tree_data = {
                'base_tree': base_tree_sha,
                'tree': tree_items
            }
            
            response = requests.post(tree_url, headers=headers, data=json.dumps(tree_data))
            if response.status_code != 201:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ: {response.status_code}")
                return False
            
            new_tree_sha = response.json()['sha']
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            commit_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/commits"
            commit_data = {
                'message': commit_message,
                'tree': new_tree_sha,
                'parents': [last_commit_sha]
            }
            
            response = requests.post(commit_url, headers=headers, data=json.dumps(commit_data))
            if response.status_code != 201:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç: {response.status_code}")
                return False
            
            new_commit_sha = response.json()['sha']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ—Ç–∫—É
            ref_url = f"https://api.github.com/repos/{config['owner']}/{config['repo']}/git/refs/heads/{config['branch']}"
            ref_data = {
                'sha': new_commit_sha
            }
            
            response = requests.patch(ref_url, headers=headers, data=json.dumps(ref_data))
            if response.status_code != 200:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ç–∫—É: {response.status_code}")
                return False
            
            print(f"‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {new_commit_sha[:7]}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
    
    def push_updates(self, total_updated: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ GitHub"""
        if total_updated == 0:
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
            return False
        
        print(f"\nüöÄ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í GITHUB")
        print("="*60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        possible_locations = [
            '/app/output',
            './output', 
            '.',  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            '/app'
        ]
        
        files_to_commit = {}
        
        for location in possible_locations:
            relay_file = os.path.join(location, 'DNSCrypt_relay.txt')
            servers_file = os.path.join(location, 'DNSCrypt_servers.txt')
            
            if os.path.exists(relay_file) and relay_file not in files_to_commit.values():
                files_to_commit[relay_file] = 'lib/DNSCrypt_relay.txt'
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–ª–µ–µ–≤: {relay_file}")
            
            if os.path.exists(servers_file) and servers_file not in files_to_commit.values():
                files_to_commit[servers_file] = 'lib/DNSCrypt_servers.txt'
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–æ–≤: {servers_file}")
        
        if not files_to_commit:
            print("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö")
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤:")
            for location in possible_locations:
                if os.path.exists(location):
                    try:
                        files = os.listdir(location)
                        dns_files = [f for f in files if 'DNSCrypt' in f]
                        print(f"   {location}: {dns_files}")
                    except:
                        pass
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        commit_message = f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n" \
                        f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_updated}\n" \
                        f"- –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}\n" \
                        f"- –ò—Å—Ç–æ—á–Ω–∏–∫: dnscrypt.info/public-servers\n\n" \
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª—å–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º v2.0"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        success = self.create_github_commit(files_to_commit, commit_message)
        
        if success:
            config = self.get_config()
            print(f"\nüéâ –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´ –í GITHUB!")
            print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_commit)}")
            print(f"üîó –°—Å—ã–ª–∫–∞: https://github.com/{config['owner']}/{config['repo']}/tree/{config['branch']}/lib")
            return True
        else:
            print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –§–ê–ô–õ–´ –í GITHUB")
            return False