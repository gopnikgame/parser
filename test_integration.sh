#!/bin/bash

# –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å Docker –∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# –í–µ—Ä—Å–∏—è: 2.0 - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

echo "üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò DNSCRYPT PARSER V2.0"
echo "========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –°—á–µ—Ç—á–∏–∫–∏
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
test_log() {
    local level=$1
    local message=$2
    echo -e "${!level}${message}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    test_log "BLUE" "üß™ –¢–µ—Å—Ç: $test_name"
    
    if eval "$test_command"; then
        test_log "GREEN" "  ‚úÖ –ü–†–û–ô–î–ï–ù"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        test_log "RED" "  ‚ùå –ü–†–û–í–ê–õ–ï–ù"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

echo ""
test_log "YELLOW" "üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–£–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´"
echo "================================================"

# –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–∞
run_test "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–∞" "[ -f 'parser.py' ] && [ -f 'parser_new.py' ] && [ -f 'scheduler.py' ]"

# –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ core –º–æ–¥—É–ª—è
run_test "Core –º–æ–¥—É–ª—å" "[ -d 'core' ] && [ -f 'core/__init__.py' ] && [ -f 'core/base_parser.py' ] && [ -f 'core/config.py' ]"

# –¢–µ—Å—Ç 3: –§–∞–π–ª–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
run_test "File handlers" "[ -d 'file_handlers' ] && [ -f 'file_handlers/__init__.py' ] && [ -f 'file_handlers/config_parser.py' ]"

# –¢–µ—Å—Ç 4: GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
run_test "GitHub –º–æ–¥—É–ª—å" "[ -d 'github' ] && [ -f 'github/__init__.py' ] && [ -f 'github/github_manager.py' ]"

# –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
run_test "Page handlers" "[ -d 'page_handlers' ] && [ -f 'page_handlers/__init__.py' ] && [ -f 'page_handlers/page_navigator.py' ]"

# –¢–µ—Å—Ç 6: –ò–∑–≤–ª–µ–∫–∞—Ç–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
run_test "Extractors" "[ -d 'extractors' ] && [ -f 'extractors/__init__.py' ] && [ -f 'extractors/dialog_extractor.py' ]"

# –¢–µ—Å—Ç 7: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
run_test "Strategies" "[ -d 'strategies' ] && [ -f 'strategies/__init__.py' ] && [ -f 'strategies/error_recovery.py' ]"

# –¢–µ—Å—Ç 8: –£—Ç–∏–ª–∏—Ç—ã
run_test "Utils" "[ -d 'utils' ] && [ -f 'utils/__init__.py' ] && [ -f 'utils/metrics.py' ]"

echo ""
test_log "YELLOW" "üê≥ –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò"
echo "====================================="

# –¢–µ—Å—Ç 9: Docker —Ñ–∞–π–ª—ã
run_test "Docker —Ñ–∞–π–ª—ã" "[ -f 'Dockerfile' ] && [ -f 'docker-compose.yml' ] && [ -f 'requirements.txt' ]"

# –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile –Ω–∞ –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
run_test "Dockerfile —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏" "grep -q 'COPY core/' Dockerfile && grep -q 'COPY file_handlers/' Dockerfile"

# –¢–µ—Å—Ç 11: Docker-compose –ø—Ä–æ—Ñ–∏–ª–∏
run_test "Docker-compose –ø—Ä–æ—Ñ–∏–ª–∏" "grep -q 'profiles:' docker-compose.yml && grep -q 'modular' docker-compose.yml && grep -q 'legacy' docker-compose.yml"

# –¢–µ—Å—Ç 12: Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
run_test "Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" "grep -q 'PARSER_MODE' docker-compose.yml"

echo ""
test_log "YELLOW" "üìù –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í"
echo "======================================"

# –¢–µ—Å—Ç 13: .env.example –æ–±–Ω–æ–≤–ª–µ–Ω
run_test ".env.example –¥–ª—è v2.0" "grep -q 'PARSER_MODE' .env.example && grep -q 'modular' .env.example"

# –¢–µ—Å—Ç 14: Requirements –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
run_test "Requirements –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã" "grep -q 'selenium-stealth' requirements.txt && grep -q 'pydantic' requirements.txt"

echo ""
test_log "YELLOW" "üõ†Ô∏è –ü–†–û–í–ï–†–ö–ê –°–ö–†–ò–ü–¢–û–í –£–ü–†–ê–í–õ–ï–ù–ò–Ø"
echo "=================================="

# –¢–µ—Å—Ç 15: manage_parser.sh –æ–±–Ω–æ–≤–ª–µ–Ω
run_test "manage_parser.sh –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã" "grep -q 'run_modular_parser' manage_parser.sh && grep -q 'check_modular_system' manage_parser.sh"

# –¢–µ—Å—Ç 16: –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é
run_test "–ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é" "grep -q '–º–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v2.0' manage_parser.sh && grep -q 'legacy –ø–∞—Ä—Å–µ—Ä' manage_parser.sh"

echo ""
test_log "YELLOW" "üêç –ü–†–û–í–ï–†–ö–ê PYTHON –ò–ù–¢–ï–ì–†–ê–¶–ò–ò"
echo "================================"

# –¢–µ—Å—Ç 17: parser_new.py –∏–º–ø–æ—Ä—Ç—ã
run_test "parser_new.py –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π" "grep -q 'from core import' parser_new.py && grep -q 'from strategies' parser_new.py"

# –¢–µ—Å—Ç 18: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
run_test "–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ parser_new.py" "grep -q 'LEGACY_AVAILABLE' parser_new.py && grep -q 'import parser as legacy_parser' parser_new.py"

# –¢–µ—Å—Ç 19: scheduler.py –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
run_test "scheduler.py –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥—É–ª–µ–π" "grep -q 'PARSER_MODE' scheduler.py && grep -q 'parser_new.py' scheduler.py"

echo ""
test_log "YELLOW" "‚öôÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´"
echo "========================="

# –¢–µ—Å—Ç 20: Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å parser_new.py
run_test "Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å parser_new.py" "python -m py_compile parser_new.py 2>/dev/null"

# –¢–µ—Å—Ç 21: Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å scheduler.py
run_test "Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å scheduler.py" "python -m py_compile scheduler.py 2>/dev/null"

# –¢–µ—Å—Ç 22: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if python -c "import sys; sys.path.append('.'); from core import DNSCryptParser" 2>/dev/null; then
    run_test "–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã" "true"
else
    run_test "–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã" "false"
fi

# –¢–µ—Å—Ç 23: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞
run_test "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞" "grep -q 'choose_execution_mode' parser_new.py && grep -q 'MODULAR_AVAILABLE' parser_new.py"

echo ""
test_log "YELLOW" "üìã –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò"
echo "=========================="

# –¢–µ—Å—Ç 24: README –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è v2.0
run_test "README.md –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è v2.0" "grep -q 'v2.0' README.md && grep -q '–º–æ–¥—É–ª—å–Ω–∞—è' README.md"

# –¢–µ—Å—Ç 25: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ README
run_test "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª–∏" "grep -q 'core/' README.md && grep -q 'strategies/' README.md"

echo ""
test_log "YELLOW" "üîÑ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í"
echo "========================================"

# –¢–µ—Å—Ç 26: Docker build –ø—Ä–æ—Ö–æ–¥–∏—Ç
if command -v docker &> /dev/null; then
    run_test "Docker build —É—Å–ø–µ—à–µ–Ω" "docker build -t dnscrypt-parser-test . >/dev/null 2>&1"
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    docker rmi dnscrypt-parser-test >/dev/null 2>&1 || true
else
    test_log "YELLOW" "‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–±–æ—Ä–∫–∏"
fi

# –¢–µ—Å—Ç 27: manage_parser.sh –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è
run_test "manage_parser.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π" "[ -x 'manage_parser.sh' ] || chmod +x manage_parser.sh"

# –¢–µ—Å—Ç 28: launcher_parser.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
run_test "launcher_parser.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π" "[ -x 'launcher_parser.sh' ] || chmod +x launcher_parser.sh"

echo ""
test_log "YELLOW" "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢"
echo "=================="

test_log "BLUE" "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
test_log "GREEN" "–ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED_TESTS"
test_log "RED" "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED_TESTS"

# –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
if [ $TOTAL_TESTS -gt 0 ]; then
    SUCCESS_RATE=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
    test_log "YELLOW" "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $SUCCESS_RATE%"
    
    if [ $SUCCESS_RATE -ge 90 ]; then
        test_log "GREEN" "üéâ –û–¢–õ–ò–ß–ù–û! –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!"
        echo ""
        test_log "GREEN" "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
        echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./manage_parser.sh"
        echo "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ: '4. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É'"
        echo "   ‚Ä¢ –ó–∞—Ç–µ–º: '10. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä)'"
    elif [ $SUCCESS_RATE -ge 75 ]; then
        test_log "YELLOW" "‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã."
    else
        test_log "RED" "‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."
    fi
else
    test_log "RED" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã"
fi

echo ""
test_log "BLUE" "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º:"
echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./manage_parser.sh"
echo "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ: '4. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É'"
echo "   ‚Ä¢ –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs <container_name>"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
if [ $FAILED_TESTS -gt 0 ]; then
    exit 1
else
    exit 0
fi