"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt - –∑–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é main() –∏–∑ parser.py
"""
import time
import os
import sys
from typing import Dict, List, Optional, Any

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
from core.config import ParserConfig
from core.driver_manager import SmartDriverManager
from extractors.dialog_extractor import AdvancedDialogExtractor
from strategies.error_recovery import SmartErrorRecovery
from utils.metrics import ParsingMetrics, ParsingCache
from file_handlers.config_parser import ConfigFileParser
from file_handlers.file_updater import FileUpdater
from github.github_manager import GitHubManager
from page_handlers.page_navigator import PageNavigator
from page_handlers.pagination_manager import PaginationManager
from data_handlers.server_processor import ServerProcessor

class DNSCryptParser:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt —Å –ø–æ–ª–Ω–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.config = ParserConfig.from_env()
            self.driver_manager = SmartDriverManager(self.config)
            self.driver = None
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            self.dialog_extractor = None
            self.error_recovery = None
            self.page_navigator = None
            self.pagination_manager = None
            self.server_processor = None
            
            # –§–∞–π–ª–æ–≤—ã–µ –º–æ–¥—É–ª–∏
            self.config_parser = ConfigFileParser()
            self.file_updater = FileUpdater()
            self.github_manager = GitHubManager()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫...")
            self.metrics = ParsingMetrics()
            
            print("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.cache = ParsingCache()
            
            if not self.cache.cache_enabled:
                print("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫—ç—à–∞")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
            self.session_stats = {
                'total_processed': 0,
                'successful': 0,
                'failed': 0,
                'cache_hits': 0,
                'recovery_attempts': 0,
                'start_time': None,
                'end_time': None
            }
            
            print("üöÄ DNSCrypt Parser v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DNSCryptParser: {e}")
            # –°–æ–∑–¥–∞–µ–º fallback –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            self.metrics = None
            self.cache = None
            print("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –º–µ—Ç—Ä–∏–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            raise
    
    def initialize(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = self.driver_manager.create_stealth_driver()
            if not self.driver:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            self.dialog_extractor = AdvancedDialogExtractor(self.driver, self.config)
            self.error_recovery = SmartErrorRecovery(self.driver, self.config)
            self.page_navigator = PageNavigator(self.driver, self.config)
            self.pagination_manager = PaginationManager(self.driver, self.config)
            self.server_processor = ServerProcessor(self.driver, self.config, self.dialog_extractor)
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.cache and self.cache.cache_enabled:
                self.cache.clear_expired_cache()
            
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def run_full_parsing(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            self.session_stats['start_time'] = time.time()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            session_id = None
            if self.metrics:
                session_id = self.metrics.start_session()
            
            print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤")
            print("=" * 70)
            
            # –≠—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            print("\nüì• –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            print("-" * 50)
            
            target_servers = self._download_and_parse_configs()
            if not target_servers:
                return self._create_error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –≠—Ç–∞–ø 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("\nüåê –≠–¢–ê–ü 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            print("-" * 50)
            
            if not self.page_navigator.navigate_to_page("https://dnscrypt.info/public-servers"):
                return self._create_error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
            # –≠—Ç–∞–ø 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            print("\nüîß –≠–¢–ê–ü 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
            print("-" * 50)
            
            pagination_success = self.pagination_manager.setup_pagination()
            if pagination_success:
                print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –≠—Ç–∞–ø 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print("\nüîç –≠–¢–ê–ü 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            print("-" * 50)
            
            parsing_result = self.server_processor.process_servers(target_servers)
            
            # –≠—Ç–∞–ø 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            print("\nüìù –≠–¢–ê–ü 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            print("-" * 50)
            
            update_result = self._update_config_files(parsing_result, target_servers)
            
            # –≠—Ç–∞–ø 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub
            print("\nüöÄ –≠–¢–ê–ü 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub")
            print("-" * 50)
            
            github_result = self._push_to_github(update_result['total_updated'])
            
            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            self.session_stats['end_time'] = time.time()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            session = None
            if self.metrics:
                session = self.metrics.end_session()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                'success': True,
                'parsing_result': parsing_result,
                'update_result': update_result,
                'github_result': github_result,
                'session_stats': self.session_stats,
                'metrics': self.metrics.generate_detailed_report() if self.metrics else "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                'duration': self.session_stats['end_time'] - self.session_stats['start_time']
            }
            
            self._print_final_summary(result)
            return result
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            import traceback
            traceback.print_exc()
            return self._create_error_result(str(e))
    
    def _download_and_parse_configs(self) -> List[Dict[str, Any]]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URLs –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            github_config = self.github_manager.get_config()
            github_urls = {
                'DNSCrypt_relay.txt': f'https://github.com/{github_config["owner"]}/{github_config["repo"]}/blob/{github_config["branch"]}/lib/DNSCrypt_relay.txt',
                'DNSCrypt_servers.txt': f'https://github.com/{github_config["owner"]}/{github_config["repo"]}/blob/{github_config["branch"]}/lib/DNSCrypt_servers.txt'
            }
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            temp_files = []
            for filename, url in github_urls.items():
                temp_filename = f"temp_{filename}"
                if self.config_parser.download_file(url, temp_filename):
                    temp_files.append(temp_filename)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}")
                    return []
            
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
            relay_servers = self.config_parser.parse_config_file('temp_DNSCrypt_relay.txt')
            dnscrypt_servers = self.config_parser.parse_config_file('temp_DNSCrypt_servers.txt')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
            all_servers = relay_servers + dnscrypt_servers
            
            print(f"üìã –†–µ–ª–µ–µ–≤: {len(relay_servers)}")
            print(f"üìã –°–µ—Ä–≤–µ—Ä–æ–≤: {len(dnscrypt_servers)}")
            print(f"üìã –í—Å–µ–≥–æ: {len(all_servers)}")
            
            return all_servers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return []
    
    def _update_config_files(self, parsing_result: Dict[str, Any], target_servers: List[Dict]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            servers_data = parsing_result.get('servers_data', {})
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
            relay_data = {name: info for name, info in servers_data.items() 
                         if info.get('protocol') == 'DNSCrypt relay'}
            server_data = {name: info for name, info in servers_data.items() 
                          if info.get('protocol') == 'DNSCrypt'}
            
            total_updated = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–ª–µ–µ–≤
            if relay_data:
                print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–ª–µ–µ–≤ ({len(relay_data)} —Å–µ—Ä–≤–µ—Ä–æ–≤)...")
                if os.path.exists('temp_DNSCrypt_relay.txt'):
                    os.rename('temp_DNSCrypt_relay.txt', 'DNSCrypt_relay.txt')
                
                updated_count = self.file_updater.update_config_file(
                    'DNSCrypt_relay.txt', relay_data, is_relay_file=True
                )
                total_updated += updated_count
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–ª–µ–µ–≤: {updated_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–æ–≤
            if server_data:
                print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ ({len(server_data)} —Å–µ—Ä–≤–µ—Ä–æ–≤)...")
                if os.path.exists('temp_DNSCrypt_servers.txt'):
                    os.rename('temp_DNSCrypt_servers.txt', 'DNSCrypt_servers.txt')
                
                updated_count = self.file_updater.update_config_file(
                    'DNSCrypt_servers.txt', server_data, is_relay_file=False
                )
                total_updated += updated_count
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}")
            
            return {
                'total_updated': total_updated,
                'relay_updated': len(relay_data),
                'server_updated': len(server_data),
                'relay_data': relay_data,
                'server_data': server_data
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return {'total_updated': 0, 'error': str(e)}
    
    def _push_to_github(self, total_updated: int) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ GitHub"""
        try:
            if total_updated == 0:
                print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
                return {'success': False, 'reason': 'no_changes'}
            
            github_token = os.getenv('GITHUB_TOKEN')
            if not github_token:
                print("‚ö†Ô∏è GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return {'success': False, 'reason': 'no_token'}
            
            print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {total_updated} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ GitHub...")
            
            success = self.github_manager.push_updates(total_updated)
            
            if success:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub")
                return {'success': True, 'files_updated': total_updated}
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
                return {'success': False, 'reason': 'push_failed'}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GitHub –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return {'success': False, 'reason': 'exception', 'error': str(e)}
    
    def _print_final_summary(self, result: Dict[str, Any]):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 70)
        
        parsing_result = result.get('parsing_result', {})
        update_result = result.get('update_result', {})
        duration = result.get('duration', 0)
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {parsing_result.get('successful', 0)}/{parsing_result.get('total_processed', 0)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {parsing_result.get('success_rate', 0):.1f}%")
        print(f"üíæ –ö—ç—à —Ö–∏—Ç—ã: {parsing_result.get('cache_hits', 0)}")
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {parsing_result.get('recovery_attempts', 0)}")
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {update_result.get('total_updated', 0)}")
        
        github_result = result.get('github_result', {})
        if github_result.get('success'):
            print("üöÄ GitHub: –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è GitHub: {github_result.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print("=" * 70)
        
        # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_report = result.get('metrics', '')
        if metrics_report and metrics_report != "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã":
            print("\nüìà –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
            print(metrics_report)
    
    def _create_error_result(self, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        return {
            'success': False,
            'error': error_message,
            'parsing_result': {
                'servers_data': {},
                'total_processed': 0,
                'successful': 0,
                'failed': 0,
                'success_rate': 0
            },
            'session_stats': self.session_stats
        }
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            if self.driver_manager:
                self.driver_manager.quit_driver()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.metrics:
                try:
                    self.metrics.export_csv_report()
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = ['temp_DNSCrypt_relay.txt', 'temp_DNSCrypt_servers.txt']
            for temp_file in temp_files:
                try:
                    if os.path.exists(temp_file):
                        os.remove(temp_file)
                except:
                    pass
            
            print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    def __enter__(self):
        """Context manager entry"""
        if self.initialize():
            return self
        else:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.cleanup()