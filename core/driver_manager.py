# –£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
import time
import random
import psutil
import subprocess
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import WebDriverException
from typing import Optional
from .config import ParserConfig

class SmartDriverManager:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
    
    def __init__(self, config: ParserConfig):
        self.config = config
        self.driver: Optional[webdriver.Chrome] = None
        self._session_id = None
        
    def create_stealth_driver(self) -> webdriver.Chrome:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–æ–π"""
        self._kill_existing_chrome()
        
        options = webdriver.ChromeOptions()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        for option in self.config.CHROME_OPTIONS:
            options.add_argument(option)
            
        # –î–æ–±–∞–≤–ª—è–µ–º stealth –æ–ø—Ü–∏–∏
        for option in self.config.STEALTH_OPTIONS:
            options.add_argument(option)
            
        # –ê–Ω—Ç–∏–±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
        user_agents = [
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        options.add_argument(f"--user-agent={random.choice(user_agents)}")
        
        try:
            driver = webdriver.Chrome(options=options)
            
            # –£–¥–∞–ª—è–µ–º webdriver —Å–≤–æ–π—Å—Ç–≤–∞
            self._inject_stealth_scripts(driver)
            
            self.driver = driver
            self._session_id = driver.session_id
            
            print("‚úÖ Stealth Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return driver
            
        except WebDriverException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise
    
    def _inject_stealth_scripts(self, driver: webdriver.Chrome):
        """–í–Ω–µ–¥—Ä–µ–Ω–∏–µ stealth —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        stealth_script = """
        // –£–¥–∞–ª—è–µ–º webdriver —Å–≤–æ–π—Å—Ç–≤–∞
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });
        
        // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        Object.defineProperty(navigator, 'geolocation', {
            get: () => ({
                getCurrentPosition: () => {},
                watchPosition: () => {},
                clearWatch: () => {}
            }),
        });
        
        // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º —è–∑—ã–∫–∏
        Object.defineProperty(navigator, 'languages', {
            get: () => ['en-US', 'en'],
        });
        
        // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
        Object.defineProperty(navigator, 'plugins', {
            get: () => [
                {
                    0: {type: "application/x-google-chrome-pdf", suffixes: "pdf", description: "Chrome PDF Plugin"},
                    description: "Chrome PDF Plugin",
                    filename: "internal-pdf-viewer",
                    length: 1,
                    name: "Chrome PDF Plugin"
                }
            ],
        });
        
        // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        const originalQuery = window.navigator.permissions.query;
        window.navigator.permissions.query = (parameters) => (
            parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
        );
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ Chrome –æ–±—ä–µ–∫—Ç–µ
        if (window.chrome) {
            Object.defineProperty(window.chrome, 'runtime', {
                get: () => ({
                    onConnect: undefined,
                    onMessage: undefined
                }),
            });
        }
        """
        
        try:
            driver.execute_script(stealth_script)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ–¥—Ä–∏—Ç—å stealth —Å–∫—Ä–∏–ø—Ç—ã: {e}")
    
    def _kill_existing_chrome(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome"""
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —á–µ—Ä–µ–∑ psutil
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'] and 'chrome' in proc.info['name'].lower():
                    try:
                        proc.terminate()
                        proc.wait(timeout=3)
                    except:
                        try:
                            proc.kill()
                        except:
                            pass
            
            # Backup –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            subprocess.run(['pkill', '-f', 'chrome'], check=False, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(['pkill', '-f', 'chromium'], check=False,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            time.sleep(2)
            print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome: {e}")
    
    def is_driver_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if not self.driver:
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            _ = self.driver.title
            return True
        except:
            return False
    
    def recover_driver(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–±–æ—è"""
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        try:
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            
            self.driver = self.create_stealth_driver()
            return True
            
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä: {e}")
            return False
    
    def quit_driver(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except:
                pass
            finally:
                self.driver = None
                self._session_id = None
        
        self._kill_existing_chrome()
    
    def get_driver(self) -> Optional[webdriver.Chrome]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        return self.driver