"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import time
import random
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from typing import Dict, List, Any, Optional, Tuple

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    from ..core.config import ParserConfig
    from ..extractors.dialog_extractor import AdvancedDialogExtractor
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from core.config import ParserConfig
    from extractors.dialog_extractor import AdvancedDialogExtractor

class ServerProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig, dialog_extractor: AdvancedDialogExtractor):
        self.driver = driver
        self.config = config
        self.dialog_extractor = dialog_extractor
        self.processing_stats = {
            'total_found_rows': 0,
            'target_servers_found': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        }
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self.patterns = {
            'ip_address': re.compile(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'),
            'server_name': re.compile(r'^[a-zA-Z0-9\-_.]+$'),
            'domain_name': re.compile(r'[a-zA-Z0-9\-_.]+\.[a-zA-Z]{2,}'),
            'clean_text': re.compile(r'[^\w\-_.]'),
            'protocol_indicators': {
                'relay': re.compile(r'relay|–∞–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä', re.IGNORECASE),
                'doh': re.compile(r'doh|dns-over-https|https', re.IGNORECASE),
                'dot': re.compile(r'dot|dns-over-tls|tls', re.IGNORECASE),
                'dnscrypt': re.compile(r'dnscrypt|–∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏–µ', re.IGNORECASE)
            }
        }
        
        # –°–ø–∏—Å–∫–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.known_servers = {
            'cloudflare': ['1.1.1.1', '1.0.0.1'],
            'quad9': ['9.9.9.9', '149.112.112.112'],
            'google': ['8.8.8.8', '8.8.4.4'],
            'opendns': ['208.67.222.222', '208.67.220.220']
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'processed': 0,
            'valid': 0,
            'duplicates': 0,
            'errors': 0,
            'protocols': {}
        }
    
    def process_servers(self, target_servers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print(f"üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(target_servers)} —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞
        all_rows = self._get_server_rows_enhanced()
        if not all_rows:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return self._create_empty_result("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫ –Ω–∞ —Å–∞–π—Ç–µ")
        self.processing_stats['total_found_rows'] = len(all_rows)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–º–µ–Ω —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        target_names = {server['name'] for server in target_servers}
        print(f"üéØ –ò—â–µ–º {len(target_names)} —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        row_index = self._create_row_index(all_rows)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
        servers_data = {}
        processed_count = 0
        
        for server in target_servers:
            server_name = server['name']
            processed_count += 1
            
            print(f"\n[{processed_count}/{len(target_servers)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {server_name}...")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            row = row_index.get(server_name)
            if not row:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {server_name}")
                self.processing_stats['failed_extractions'] += 1
                continue
            
            self.processing_stats['target_servers_found'] += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                start_time = time.time()
                info = self.dialog_extractor.extract_server_info_smart(row, server_name)
                duration = time.time() - start_time
                
                if info and info.get('ip'):
                    servers_data[server_name] = info
                    self.processing_stats['successful_extractions'] += 1
                    print(f"‚úÖ {server_name} -> {info['ip']} ({info['protocol']}) [{duration:.1f}s]")
                else:
                    self.processing_stats['failed_extractions'] += 1
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name} [{duration:.1f}s]")
                
            except Exception as e:
                self.processing_stats['failed_extractions'] += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {server_name}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            time.sleep(random.uniform(0.5, 2.0))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return self._create_result(servers_data, target_servers)
    
    def process_servers_batch(self, servers_data: List[Dict]) -> Tuple[List[Dict], List[Dict]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –∏ —Ä–µ–ª–µ–∏"""
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–∏–∏ –∏–∑ {len(servers_data)} —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        processed_servers = []
        processed_relays = []
        seen_items = set()
        
        for i, server_data in enumerate(servers_data):
            try:
                self.stats['processed'] += 1
                
                # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                cleaned_server = self._clean_server_data(server_data)
                if not cleaned_server:
                    self.stats['errors'] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                server_key = self._generate_server_key(cleaned_server)
                if server_key in seen_items:
                    self.stats['duplicates'] += 1
                    continue
                
                seen_items.add(server_key)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —Ä–µ–ª–µ–π)
                if self._is_relay(cleaned_server):
                    processed_relays.append(cleaned_server)
                else:
                    processed_servers.append(cleaned_server)
                
                self.stats['valid'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
                protocol = cleaned_server.get('protocol', 'Unknown')
                self.stats['protocols'][protocol] = self.stats['protocols'].get(protocol, 0) + 1
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {i}: {e}")
                self.stats['errors'] += 1
                continue
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤, {len(processed_relays)} —Ä–µ–ª–µ–µ–≤")
        self._print_processing_stats()
        
        return processed_servers, processed_relays
    
    def _clean_server_data(self, raw_data: Dict) -> Optional[Dict]:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if not isinstance(raw_data, dict):
                return None
            
            cleaned = {
                'name': '',
                'ip': '',
                'protocol': 'DNSCrypt',
                'description': '',
                'source_method': raw_data.get('extraction_method', 'unknown')
            }
            
            # –û—á–∏—â–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
            raw_name = str(raw_data.get('name', '')).strip()
            if raw_name:
                cleaned['name'] = self._clean_server_name(raw_name)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º IP –∞–¥—Ä–µ—Å
            raw_ip = str(raw_data.get('ip', '')).strip()
            if raw_ip:
                cleaned['ip'] = self._extract_ip_address(raw_ip)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç IP, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            if not cleaned['ip']:
                for field_name, field_value in raw_data.items():
                    if isinstance(field_value, str):
                        ip_match = self.patterns['ip_address'].search(field_value)
                        if ip_match:
                            cleaned['ip'] = ip_match.group()
                            break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            cleaned['protocol'] = self._determine_protocol(raw_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            cleaned['description'] = self._generate_description(raw_data, cleaned)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not cleaned['name'] and not cleaned['ip']:
                return None
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏–∑ IP –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if not cleaned['name']:
                if cleaned['ip']:
                    cleaned['name'] = f"server_{cleaned['ip'].replace('.', '_')}"
                else:
                    return None
            
            return cleaned
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    def _clean_server_name(self, raw_name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            name = raw_name.strip()
            
            # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            name = re.sub(r'[^\w\-_.]', '', name)
            
            # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç–æ—á–∫–∏
            name = re.sub(r'[_]{2,}', '_', name)
            name = re.sub(r'[.]{2,}', '.', name)
            
            # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            name = name.strip('._-')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(name) > 50:
                name = name[:50]
            
            return name
            
        except Exception:
            return raw_name[:50] if raw_name else ''
    
    def _extract_ip_address(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            match = self.patterns['ip_address'].search(text)
            if match:
                ip = match.group()
                # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è IP
                parts = ip.split('.')
                if len(parts) == 4 and all(0 <= int(part) <= 255 for part in parts):
                    return ip
            return ''
        except Exception:
            return ''
    
    def _determine_protocol(self, raw_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            explicit_protocol = raw_data.get('protocol', '').strip()
            if explicit_protocol:
                return explicit_protocol
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            all_text = ' '.join(str(value) for value in raw_data.values() if isinstance(value, str)).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if self.patterns['protocol_indicators']['relay'].search(all_text):
                return 'DNSCrypt relay'
            elif self.patterns['protocol_indicators']['doh'].search(all_text):
                return 'DoH'
            elif self.patterns['protocol_indicators']['dot'].search(all_text):
                return 'DoT'
            elif self.patterns['protocol_indicators']['dnscrypt'].search(all_text):
                return 'DNSCrypt'
            
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            return 'DNSCrypt'
            
        except Exception:
            return 'DNSCrypt'
    
    def _is_relay(self, server_data: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–µ–ª–µ–µ–º"""
        try:
            protocol = server_data.get('protocol', '').lower()
            name = server_data.get('name', '').lower()
            description = server_data.get('description', '').lower()
            
            # –Ø–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–ª–µ—è
            relay_indicators = ['relay', '—Ä–µ–ª–µ–π', '–∞–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä', 'anonymizer']
            
            for indicator in relay_indicators:
                if (indicator in protocol or 
                    indicator in name or 
                    indicator in description):
                    return True
            
            return False
            
        except Exception:
            return False
    
    def _generate_server_key(self, server_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            name = server_data.get('name', '').lower().strip()
            ip = server_data.get('ip', '').strip()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–º–µ–Ω–∏ –∏ IP –∫–∞–∫ –∫–ª—é—á
            if name and ip:
                return f"{name}_{ip}"
            elif ip:
                return f"ip_{ip}"
            elif name:
                return f"name_{name}"
            else:
                return f"unknown_{hash(str(server_data))}"
                
        except Exception:
            return f"error_{hash(str(server_data))}"
    
    def _generate_description(self, raw_data: Dict, cleaned_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º IP –µ—Å–ª–∏ –µ—Å—Ç—å
            if cleaned_data.get('ip'):
                parts.append(f"IP: {cleaned_data['ip']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            protocol = cleaned_data.get('protocol', 'DNSCrypt')
            if protocol != 'DNSCrypt':
                parts.append(f"Protocol: {protocol}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            method = raw_data.get('extraction_method', '')
            if method:
                parts.append(f"Source: {method}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for key, value in raw_data.items():
                if (key not in ['name', 'ip', 'protocol', 'extraction_method'] and 
                    isinstance(value, str) and 
                    value.strip() and 
                    len(value.strip()) < 100):
                    parts.append(f"{key}: {value.strip()}")
            
            return ' | '.join(parts) if parts else 'DNSCrypt server'
            
        except Exception:
            return 'DNSCrypt server'
    
    def format_for_config(self, servers: List[Dict], is_relay: bool = False) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            formatted_lines = []
            server_type = "relay" if is_relay else "server"
            
            for server in servers:
                try:
                    name = server.get('name', 'unknown')
                    ip = server.get('ip', '')
                    protocol = server.get('protocol', 'DNSCrypt')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è IP
                    if ip:
                        if is_relay:
                            line = f"{name:<30} -> {ip} (DNSCrypt relay)"
                        else:
                            line = f"{name:<30} -> {ip} ({protocol})"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç IP, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
                        if is_relay:
                            line = f"{name:<30} (DNSCrypt relay)"
                        else:
                            line = f"{name:<30} ({protocol})"
                    
                    formatted_lines.append(line)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            formatted_lines.sort()
            
            print(f"üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_lines)} {server_type}(s)")
            return formatted_lines
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []
    
    def _print_processing_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}")
            print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {self.stats['valid']}")
            print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.stats['duplicates']}")
            print(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
            
            if self.stats['protocols']:
                print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:")
                for protocol, count in sorted(self.stats['protocols'].items()):
                    print(f"     {protocol}: {count}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def validate_server_data(self, server: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not server.get('name'):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –µ—Å–ª–∏ –µ—Å—Ç—å
            ip = server.get('ip', '')
            if ip and not self.patterns['ip_address'].match(ip):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
            name = server.get('name', '')
            if len(name) < 1 or len(name) > 100:
                return False
            
            return True
            
        except Exception:
            return False
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.stats.copy()
    
    def reset_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'processed': 0,
            'valid': 0,
            'duplicates': 0,
            'errors': 0,
            'protocols': {}
        }
    
    def _get_server_rows_enhanced(self) -> List:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        print("üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-loading –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self._scroll_to_load_content()
        
        all_rows = []
        found_selectors = []
        
        for selector in self.config.TABLE_ROW_SELECTORS:
            try:
                rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                valid_rows = self._filter_valid_rows(rows)
                
                if valid_rows:
                    print(f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(valid_rows)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
                    all_rows.extend(valid_rows)
                    found_selectors.append(selector)
                    
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = self._remove_duplicate_rows(all_rows)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã: {found_selectors}")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        self._print_row_examples(unique_rows[:5])
        
        return unique_rows
    
    def _scroll_to_load_content(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        for i in range(5):
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(1, 3))
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(random.uniform(0.5, 1.5))
    
    def _filter_valid_rows(self, rows) -> List:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        valid_rows = []
        
        for row in rows:
            try:
                if not row.is_displayed():
                    continue
                
                text = row.text.strip()
                if not text or len(text) < 10:
                    continue
                
                if any(skip_text in text.lower() for skip_text in 
                       ["no data available", "loading", "please wait"]):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è—á–µ–µ–∫
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if len(cells) >= 2:
                    first_cell_text = cells[0].text.strip()
                    if first_cell_text and len(first_cell_text) > 2:
                        valid_rows.append(row)
                        
            except:
                continue
        
        return valid_rows
    
    def _remove_duplicate_rows(self, rows) -> List:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫"""
        unique_rows = []
        seen_texts = set()
        
        for row in rows:
            try:
                row_text = row.text.strip()[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                if row_text not in seen_texts and len(row_text) > 10:
                    seen_texts.add(row_text)
                    unique_rows.append(row)
            except:
                continue
        
        return unique_rows
    
    def _print_row_examples(self, example_rows):
        """–í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        for i, row in enumerate(example_rows):
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if cells:
                    first_cell = cells[0].text.strip()
                    print(f"   –ü—Ä–∏–º–µ—Ä {i+1}: {first_cell}")
            except:
                continue
    
    def _create_row_index(self, all_rows: List) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        row_index = {}
        
        for row in all_rows:
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if len(cells) > 0:
                    server_name = cells[0].text.strip()
                    if server_name and len(server_name) > 2:
                        row_index[server_name] = row
            except:
                continue
        
        print(f"üìä –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è {len(row_index)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return row_index
    
    def _create_result(self, servers_data: Dict[str, Any], target_servers: List[Dict]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        total_processed = len(target_servers)
        successful = len(servers_data)
        success_rate = (successful / total_processed * 100) if total_processed > 0 else 0
        
        result = {
            'servers_data': servers_data,
            'total_processed': total_processed,
            'successful': successful,
            'failed': total_processed - successful,
            'success_rate': success_rate,
            'processing_stats': self.processing_stats.copy(),
            'cache_hits': 0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ dialog_extractor
            'recovery_attempts': 0  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ error_recovery
        }
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {self.processing_stats['total_found_rows']}")
        print(f"   –¶–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {self.processing_stats['target_servers_found']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {self.processing_stats['successful_extractions']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self.processing_stats['failed_extractions']}")
        print(f"   –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        return result
    
    def _create_empty_result(self, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        return {
            'servers_data': {},
            'total_processed': 0,
            'successful': 0,
            'failed': 0,
            'success_rate': 0,
            'error': error_message,
            'processing_stats': self.processing_stats.copy()
        }
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.processing_stats.copy()