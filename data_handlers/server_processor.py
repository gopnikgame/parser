"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from typing import Dict, List, Any
from ..core.config import ParserConfig
from ..extractors.dialog_extractor import AdvancedDialogExtractor

class ServerProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig, dialog_extractor: AdvancedDialogExtractor):
        self.driver = driver
        self.config = config
        self.dialog_extractor = dialog_extractor
        self.processing_stats = {
            'total_found_rows': 0,
            'target_servers_found': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        }
    
    def process_servers(self, target_servers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print(f"üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(target_servers)} —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞
        all_rows = self._get_server_rows_enhanced()
        if not all_rows:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return self._create_empty_result("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫ –Ω–∞ —Å–∞–π—Ç–µ")
        self.processing_stats['total_found_rows'] = len(all_rows)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–º–µ–Ω —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        target_names = {server['name'] for server in target_servers}
        print(f"üéØ –ò—â–µ–º {len(target_names)} —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        row_index = self._create_row_index(all_rows)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
        servers_data = {}
        processed_count = 0
        
        for server in target_servers:
            server_name = server['name']
            processed_count += 1
            
            print(f"\n[{processed_count}/{len(target_servers)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {server_name}...")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            row = row_index.get(server_name)
            if not row:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {server_name}")
                self.processing_stats['failed_extractions'] += 1
                continue
            
            self.processing_stats['target_servers_found'] += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                start_time = time.time()
                info = self.dialog_extractor.extract_server_info_smart(row, server_name)
                duration = time.time() - start_time
                
                if info and info.get('ip'):
                    servers_data[server_name] = info
                    self.processing_stats['successful_extractions'] += 1
                    print(f"‚úÖ {server_name} -> {info['ip']} ({info['protocol']}) [{duration:.1f}s]")
                else:
                    self.processing_stats['failed_extractions'] += 1
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name} [{duration:.1f}s]")
                
            except Exception as e:
                self.processing_stats['failed_extractions'] += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {server_name}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            time.sleep(random.uniform(0.5, 2.0))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return self._create_result(servers_data, target_servers)
    
    def _get_server_rows_enhanced(self) -> List:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        print("üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-loading –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self._scroll_to_load_content()
        
        all_rows = []
        found_selectors = []
        
        for selector in self.config.TABLE_ROW_SELECTORS:
            try:
                rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                valid_rows = self._filter_valid_rows(rows)
                
                if valid_rows:
                    print(f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(valid_rows)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
                    all_rows.extend(valid_rows)
                    found_selectors.append(selector)
                    
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = self._remove_duplicate_rows(all_rows)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã: {found_selectors}")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        self._print_row_examples(unique_rows[:5])
        
        return unique_rows
    
    def _scroll_to_load_content(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        for i in range(5):
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(1, 3))
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(random.uniform(0.5, 1.5))
    
    def _filter_valid_rows(self, rows) -> List:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        valid_rows = []
        
        for row in rows:
            try:
                if not row.is_displayed():
                    continue
                
                text = row.text.strip()
                if not text or len(text) < 10:
                    continue
                
                if any(skip_text in text.lower() for skip_text in 
                       ["no data available", "loading", "please wait"]):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è—á–µ–µ–∫
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if len(cells) >= 2:
                    first_cell_text = cells[0].text.strip()
                    if first_cell_text and len(first_cell_text) > 2:
                        valid_rows.append(row)
                        
            except:
                continue
        
        return valid_rows
    
    def _remove_duplicate_rows(self, rows) -> List:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫"""
        unique_rows = []
        seen_texts = set()
        
        for row in rows:
            try:
                row_text = row.text.strip()[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                if row_text not in seen_texts and len(row_text) > 10:
                    seen_texts.add(row_text)
                    unique_rows.append(row)
            except:
                continue
        
        return unique_rows
    
    def _print_row_examples(self, example_rows):
        """–í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        for i, row in enumerate(example_rows):
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if cells:
                    first_cell = cells[0].text.strip()
                    print(f"   –ü—Ä–∏–º–µ—Ä {i+1}: {first_cell}")
            except:
                continue
    
    def _create_row_index(self, all_rows: List) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        row_index = {}
        
        for row in all_rows:
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if len(cells) > 0:
                    server_name = cells[0].text.strip()
                    if server_name and len(server_name) > 2:
                        row_index[server_name] = row
            except:
                continue
        
        print(f"üìä –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è {len(row_index)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return row_index
    
    def _create_result(self, servers_data: Dict[str, Any], target_servers: List[Dict]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        total_processed = len(target_servers)
        successful = len(servers_data)
        success_rate = (successful / total_processed * 100) if total_processed > 0 else 0
        
        result = {
            'servers_data': servers_data,
            'total_processed': total_processed,
            'successful': successful,
            'failed': total_processed - successful,
            'success_rate': success_rate,
            'processing_stats': self.processing_stats.copy(),
            'cache_hits': 0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ dialog_extractor
            'recovery_attempts': 0  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ error_recovery
        }
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {self.processing_stats['total_found_rows']}")
        print(f"   –¶–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {self.processing_stats['target_servers_found']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {self.processing_stats['successful_extractions']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self.processing_stats['failed_extractions']}")
        print(f"   –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        return result
    
    def _create_empty_result(self, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        return {
            'servers_data': {},
            'total_processed': 0,
            'successful': 0,
            'failed': 0,
            'success_rate': 0,
            'error': error_message,
            'processing_stats': self.processing_stats.copy()
        }
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.processing_stats.copy()