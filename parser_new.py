#!/usr/bin/env python3
"""
DNSCrypt Parser v2.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤

üåê –ò—Å—Ç–æ—á–Ω–∏–∫: https://dnscrypt.info/public-servers
üéØ –¶–µ–ª—å: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ GitHub
üì¶ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  python parser_new.py  # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
try:
    # –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    from core import DNSCryptParser, ParserConfig
    from strategies.error_recovery import SmartErrorRecovery
    from utils.metrics import ParsingMetrics
    MODULAR_AVAILABLE = True
    print("üöÄ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ DNSCrypt Parser v2.0 –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    MODULAR_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ parser.py –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    import parser as legacy_parser
    LEGACY_AVAILABLE = True
    print("üì¶ Legacy —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
except ImportError:
    LEGACY_AVAILABLE = False
    print("‚ö†Ô∏è Legacy —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def show_system_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
    print("üîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
    print("-" * 50)
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    components = {
        "–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ v2.0": MODULAR_AVAILABLE,
        "Legacy —Ñ—É–Ω–∫—Ü–∏–∏": LEGACY_AVAILABLE,
        "Selenium": check_module('selenium'),
        "Requests": check_module('requests'),
        "PSUtil": check_module('psutil'),
        "DotEnv": check_module('dotenv')
    }
    
    print("\nüì¶ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    for component, available in components.items():
        status = "‚úÖ" if available else "‚ùå"
        print(f"{status} {component}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    github_token = os.getenv('GITHUB_TOKEN')
    chrome_headless = os.getenv('CHROME_HEADLESS', 'true')
    
    print("\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"üîë GitHub Token: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if github_token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üñ•Ô∏è Chrome Headless: {chrome_headless}")
    
    return all(components.values())

def check_module(module_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
    try:
        __import__(module_name)
        return True
    except ImportError:
        return False

def run_modular_parser():
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ v2.0"""
    if not MODULAR_AVAILABLE:
        print("‚ùå –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    try:
        print("\nüéØ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê v2.0")
        print("=" * 70)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å context manager
        with DNSCryptParser() as parser:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
            result = parser.run_full_parsing()
            
            if result['success']:
                print("\nüéâ –ú–û–î–£–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                parsing_result = result.get('parsing_result', {})
                update_result = result.get('update_result', {})
                github_result = result.get('github_result', {})
                
                print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsing_result.get('success_rate', 0):.1f}%")
                print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {update_result.get('total_updated', 0)}")
                print(f"üöÄ GitHub: {'‚úÖ' if github_result.get('success') else '‚ùå'}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('duration', 0):.1f}—Å")
                
                return True
            else:
                print(f"\n‚ùå –ú–û–î–£–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô:")
                print(f"   {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_legacy_parser():
    """–ó–∞–ø—É—Å–∫ legacy –≤–µ—Ä—Å–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    if not LEGACY_AVAILABLE:
        print("‚ùå Legacy –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    try:
        print("\nüîÑ –ó–ê–ü–£–°–ö LEGACY –ü–ê–†–°–ï–†–ê")
        print("=" * 70)
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è parser.py")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é main —Ñ—É–Ω–∫—Ü–∏—é
        legacy_parser.main()
        
        print("‚úÖ Legacy –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ legacy –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_hybrid_mode():
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å legacy –ª–æ–≥–∏–∫–æ–π"""
    print("\nüîÄ –ó–ê–ü–£–°–ö –ì–ò–ë–†–ò–î–ù–û–ì–û –†–ï–ñ–ò–ú–ê")
    print("=" * 70)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        config = ParserConfig.from_env() if MODULAR_AVAILABLE else None
        metrics = ParsingMetrics() if MODULAR_AVAILABLE else None
        
        # –ù–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
        if LEGACY_AVAILABLE:
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º legacy —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
            print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –∫ legacy –∫–æ–¥—É...")
            
            if config:
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: —Ç–∞–π–º–∞—É—Ç—ã {config.PAGE_LOAD_TIMEOUT}—Å")
            
            if metrics:
                session_id = metrics.start_session()
                print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: —Å–µ—Å—Å–∏—è {session_id} –Ω–∞—á–∞—Ç–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
            legacy_parser.main()
            
            if metrics:
                session = metrics.end_session()
                print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return True
        else:
            print("‚ùå Legacy —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        return False

def choose_execution_mode():
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüéØ –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print("-" * 50)
    
    if MODULAR_AVAILABLE and LEGACY_AVAILABLE:
        print("üîÄ –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ä–µ–∂–∏–º—ã:")
        print("   1. üöÄ –ú–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v2.0 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("   2. üì¶ Legacy –ø–∞—Ä—Å–µ—Ä (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
        print("   3. üîÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)")
        return "full"
    elif MODULAR_AVAILABLE:
        print("üöÄ –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v2.0")
        return "modular_only"
    elif LEGACY_AVAILABLE:
        print("üì¶ –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ legacy –ø–∞—Ä—Å–µ—Ä")
        return "legacy_only"
    else:
        print("‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return "none"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    start_time = time.time()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    DNSCrypt Parser v2.0                          ‚ïë
    ‚ïë              üöÄ –ú–æ–¥—É–ª—å–Ω–∞—è + Legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞                     ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ DNSCrypt —Å–µ—Ä–≤–µ—Ä–æ–≤                     ‚ïë
    ‚ïë  üåê –ò—Å—Ç–æ—á–Ω–∏–∫: https://dnscrypt.info/public-servers              ‚ïë
    ‚ïë  üì¶ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é    ‚ïë
    ‚ïë  üöÄ GitHub: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    system_ready = show_system_info()
    
    if not system_ready:
        print("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    execution_mode = choose_execution_mode()
    
    if execution_mode == "none":
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤")
        sys.exit(1)
    
    print("\n" + "="*70)
    print("üöÄ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
    print("="*70)
    
    success = False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if execution_mode == "full":
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å–µ —Ä–µ–∂–∏–º—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        print("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ú–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v2.0")
        success = run_modular_parser()
        
        if not success:
            print("\nüîÑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Legacy –ø–∞—Ä—Å–µ—Ä")
            success = run_legacy_parser()
            
        if not success:
            print("\nüîÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º")
            success = run_hybrid_mode()
            
    elif execution_mode == "modular_only":
        success = run_modular_parser()
        
    elif execution_mode == "legacy_only":
        success = run_legacy_parser()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "="*70)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    
    if success:
        print("üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {execution_mode}")
    else:
        print("‚ùå –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô!")
        print("üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω—ã")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)
    
    print("="*70)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def enhanced_get_all_server_rows(driver):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    if MODULAR_AVAILABLE:
        from data_handlers.server_processor import ServerProcessor
        from core.config import ParserConfig
        from extractors.dialog_extractor import AdvancedDialogExtractor
        
        config = ParserConfig.from_env()
        dialog_extractor = AdvancedDialogExtractor(driver, config)
        processor = ServerProcessor(driver, config, dialog_extractor)
        return processor._get_server_rows_enhanced()
    elif LEGACY_AVAILABLE:
        return legacy_parser.enhanced_get_all_server_rows(driver)
    else:
        raise RuntimeError("–ù–∏ –º–æ–¥—É–ª—å–Ω–∞—è, –Ω–∏ legacy –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

def extract_server_info_from_row_enhanced(driver, row, server_name):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if MODULAR_AVAILABLE:
        from extractors.dialog_extractor import AdvancedDialogExtractor
        from core.config import ParserConfig
        
        config = ParserConfig.from_env()
        extractor = AdvancedDialogExtractor(driver, config)
        return extractor.extract_server_info_smart(row, server_name)
    elif LEGACY_AVAILABLE:
        return legacy_parser.extract_server_info_from_row(driver, row)
    else:
        raise RuntimeError("–ù–∏ –º–æ–¥—É–ª—å–Ω–∞—è, –Ω–∏ legacy –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if LEGACY_AVAILABLE:
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ legacy –ø–∞—Ä—Å–µ—Ä–∞
    globals().update({name: getattr(legacy_parser, name) 
                     for name in dir(legacy_parser) 
                     if not name.startswith('_') and callable(getattr(legacy_parser, name))})

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("üßπ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
        try:
            if MODULAR_AVAILABLE:
                # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                pass
            elif LEGACY_AVAILABLE:
                # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ legacy —Ñ—É–Ω–∫—Ü–∏–∏
                legacy_parser.kill_existing_chrome()
        except:
            pass
        