#!/usr/bin/env python3
"""
Scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
"""

import time
import subprocess
import sys
import os
import signal
import logging
from datetime import datetime, timedelta
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/output/scheduler.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class DNSCryptScheduler:
    def __init__(self):
        self.is_running = True
        self.last_run_file = '/app/output/last_run.txt'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.interval_days = int(os.getenv('SCHEDULER_INTERVAL_DAYS', '7'))
        self.interval_seconds = self.interval_days * 24 * 60 * 60
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        self.debug_mode = os.getenv('SCHEDULER_DEBUG', 'false').lower() == 'true'
        if self.debug_mode:
            logger.setLevel(logging.DEBUG)
            logger.debug("üêõ –í–∫–ª—é—á–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
        
        self.parser_script = '/app/parser.py'
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        logger.info("üöÄ Scheduler DNSCrypt –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.interval_days} –¥–Ω–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_environment()
        
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        github_token = os.getenv('GITHUB_TOKEN')
        if not github_token or github_token == 'your_github_token_here':
            logger.warning("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        else:
            logger.info("‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_headless = os.getenv('CHROME_HEADLESS', 'true')
        logger.info(f"üåê Chrome headless: {chrome_headless}")
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False
        
    def get_last_run_time(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            if os.path.exists(self.last_run_file):
                with open(self.last_run_file, 'r') as f:
                    timestamp = f.read().strip()
                    if timestamp:
                        return datetime.fromisoformat(timestamp)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
        return None
        
    def save_last_run_time(self, run_time=None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        if run_time is None:
            run_time = datetime.now()
            
        try:
            os.makedirs(os.path.dirname(self.last_run_file), exist_ok=True)
            with open(self.last_run_file, 'w') as f:
                f.write(run_time.isoformat())
            logger.info(f"üíæ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {run_time.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
            
    def should_run_parser(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä"""
        last_run = self.get_last_run_time()
        
        if last_run is None:
            logger.info("üî• –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            return True
            
        time_since_last_run = datetime.now() - last_run
        time_until_next_run = timedelta(seconds=self.interval_seconds) - time_since_last_run
        
        if time_since_last_run.total_seconds() >= self.interval_seconds:
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (–ø—Ä–æ—à–ª–æ {time_since_last_run.days} –¥–Ω–µ–π)")
            return True
        else:
            if time_until_next_run.days > 0:
                logger.debug(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {time_until_next_run.days} –¥–Ω–µ–π {time_until_next_run.seconds // 3600} —á–∞—Å–æ–≤")
            else:
                hours_left = time_until_next_run.seconds // 3600
                minutes_left = (time_until_next_run.seconds % 3600) // 60
                logger.debug(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {hours_left} —á {minutes_left} –º–∏–Ω")
            return False
            
    def run_parser(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt...")
        
        try:
            start_time = datetime.now()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            result = subprocess.run(
                [sys.executable, self.parser_script],
                cwd='/app',
                capture_output=True,
                text=True,
                timeout=3600  # –¢–∞–π–º–∞—É—Ç 1 —á–∞—Å
            )
            
            duration = datetime.now() - start_time
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration}")
                if self.debug_mode:
                    logger.debug(f"üìä –í—ã–≤–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞:\n{result.stdout}")
                else:
                    # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    stdout_lines = result.stdout.split('\n')
                    if len(stdout_lines) > 10:
                        logger.info("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –ø–∞—Ä—Å–µ—Ä–∞:")
                        for line in stdout_lines[-10:]:
                            if line.strip():
                                logger.info(f"   {line}")
                    else:
                        logger.info(f"üìä –í—ã–≤–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞:\n{result.stdout}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                self.save_last_run_time(start_time)
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ scheduler'–∞
                self.create_scheduler_report(start_time, duration, True)
                
                return True
            else:
                logger.error(f"‚ùå –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
                logger.error(f"üìù Stderr: {result.stderr}")
                if self.debug_mode:
                    logger.error(f"üìù Stdout: {result.stdout}")
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
                self.create_scheduler_report(start_time, duration, False, result.stderr)
                
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ –ü–∞—Ä—Å–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (1 —á–∞—Å)")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
            
    def create_scheduler_report(self, start_time, duration, success, error_msg=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ scheduler'–∞"""
        try:
            report_file = '/app/output/scheduler_report.txt'
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("# –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ DNSCrypt Scheduler\n")
                f.write(f"# –î–∞—Ç–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.interval_days} –¥–Ω–µ–π\n")
                f.write(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}\n")
                
                if not success and error_msg:
                    f.write(f"\n–û—à–∏–±–∫–∞:\n{error_msg}\n")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
                if success:
                    next_run = start_time + timedelta(days=self.interval_days)
                    f.write(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%Y-%m-%d %H:%M:%S')}\n")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ scheduler'–∞: {e}")
            
    def log_status(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å scheduler'–∞"""
        last_run = self.get_last_run_time()
        now = datetime.now()
        
        logger.info("=" * 60)
        logger.info("üìä –°–¢–ê–¢–£–° SCHEDULER'–ê")
        logger.info("=" * 60)
        logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}")
        
        if last_run:
            time_since_last = now - last_run
            time_until_next = timedelta(seconds=self.interval_seconds) - time_since_last
            
            logger.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run.strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {time_since_last.days} –¥–Ω–µ–π {time_since_last.seconds // 3600} —á–∞—Å–æ–≤")
            
            if time_until_next.total_seconds() > 0:
                if time_until_next.days > 0:
                    logger.info(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {time_until_next.days} –¥–Ω–µ–π {time_until_next.seconds // 3600} —á–∞—Å–æ–≤")
                else:
                    hours = time_until_next.seconds // 3600
                    minutes = (time_until_next.seconds % 3600) // 60
                    logger.info(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {hours} —á {minutes} –º–∏–Ω")
            else:
                logger.info("üî• –í—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞!")
        else:
            logger.info("üî• –ü–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è - –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            
        logger.info(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {self.interval_days} –¥–Ω–µ–π")
        logger.info("=" * 60)
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª scheduler'–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ scheduler'–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.log_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä —Å—Ä–∞–∑—É
        if self.should_run_parser():
            success = self.run_parser()
            if success:
                logger.info(f"üò¥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {self.interval_days} –¥–Ω–µ–π")
            else:
                logger.warning("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        check_interval = 3600  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        status_interval = 6 * 3600  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        last_status_time = time.time()
        
        while self.is_running:
            try:
                current_time = time.time()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                if current_time - last_status_time >= status_interval:
                    self.log_status()
                    last_status_time = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä
                if self.should_run_parser():
                    success = self.run_parser()
                    if success:
                        logger.info(f"üò¥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {self.interval_days} –¥–Ω–µ–π")
                    else:
                        logger.warning("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                if self.debug_mode:
                    logger.debug(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {check_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                
                time.sleep(check_interval)
                
            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
        logger.info("üõë Scheduler –∑–∞–≤–µ—Ä—à–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üåü –ó–∞–ø—É—Å–∫ DNSCrypt Scheduler")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs('/app/output', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º scheduler
    scheduler = DNSCryptScheduler()
    
    try:
        scheduler.run()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())