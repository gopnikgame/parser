"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ - –¥–ª—è Vue.js v2.1
"""
import time
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from selenium.webdriver.common.action_chains import ActionChains

class AdvancedDialogExtractor:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1 –¥–ª—è Vue.js"""
    
    def __init__(self, driver: webdriver.Chrome, config=None):
        self.driver = driver
        self.config = config
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Vue.js/Vuetify –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.selectors = {
            # –ö–Ω–æ–ø–∫–∏ –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_triggers': [
                'button[data-testid*="dialog"]',
                '.v-btn[aria-haspopup="dialog"]',
                'button[aria-label*="info" i]',
                'button[aria-label*="detail" i]',
                'button[title*="info" i]',
                'button[title*="detail" i]',
                '.v-btn[data-action="show-details"]',
                '.server-info-btn',
                '.details-btn',
                'button.info-button',
                '[role="button"][aria-describedby]',
                '.v-data-table__expand-icon',
                '.expand-btn'
            ],
            
            # –î–∏–∞–ª–æ–≥–∏ –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            'dialogs': [
                '.v-dialog',
                '.v-overlay__content',
                '.v-menu__content',
                '.modal',
                '.dialog',
                '[role="dialog"]',
                '.v-card[aria-modal="true"]',
                '.popup',
                '.overlay'
            ],
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_content': [
                '.v-dialog .v-card-text',
                '.v-dialog .v-card__text',
                '.v-overlay__content .v-card-text',
                '.v-menu__content .v-list',
                '.modal-body',
                '.dialog-content',
                '.popup-content'
            ],
            
            # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            'table_rows': [
                '.v-data-table tbody tr',
                '.v-datatable tbody tr',
                'table tbody tr',
                '.data-table tbody tr',
                'tr[data-item]',
                'tr[class*="row"]'
            ],
            
            # –Ø—á–µ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            'server_cells': [
                'td[data-label*="server" i]',
                'td[data-field*="name" i]',
                'td.server-name',
                'td.name-cell',
                'td:first-child',
                'td[class*="name"]'
            ],
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_close': [
                '.v-dialog .v-btn[aria-label*="close" i]',
                '.v-overlay .v-btn[data-dismiss]',
                '.v-dialog .v-icon[aria-label*="close" i]',
                '.modal .close',
                '.dialog .close-btn',
                '[aria-label="Close"]',
                '.v-overlay__scrim'
            ]
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_patterns = {
            'server_name': [
                r'Server:\s*([^\n\r]+)',
                r'Name:\s*([^\n\r]+)',
                r'Hostname:\s*([^\n\r]+)',
                r'sdns:\/\/([^\n\r"\'<]+)',  # More specific to avoid grabbing unrelated text
            ],
            'ip_address': [
                r'Address:[^:]*?\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
                r'IP\sAddress:[^:]*?\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
                r'IP:[^:]*?\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
                r'\b([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})\b',
            ],
            'protocol': [
                r'Protocol:\s*(DNSCrypt|DoH|DoT|DNSCrypt relay)',
                r'Type:\s*(DNSCrypt|DoH|DoT|DNSCrypt relay)',
                r'(DNSCrypt relay|DNSCrypt|DNS-over-HTTPS|DNS-over-TLS)',
            ]
        }
    
    def extract_all_servers(self, max_servers: int = 200) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v2.1)...")
        
        servers_data = []
        processed_servers = set()
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            table_servers = self._extract_from_table()
            for server in table_servers:
                server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                if server_key not in processed_servers:
                    servers_data.append(server)
                    processed_servers.add(server_key)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {len(table_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏/–ø–æ–ø–∞–ø—ã
            if len(servers_data) < 50:  # –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –¥–∏–∞–ª–æ–≥–∏
                dialog_servers = self._extract_via_dialogs(max_servers - len(servers_data))
                for server in dialog_servers:
                    server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                    if server_key not in processed_servers:
                        servers_data.append(server)
                        processed_servers.add(server_key)
                
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏: {len(dialog_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ú–µ—Ç–æ–¥ 3: JavaScript –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ Vue –¥–∞–Ω–Ω—ã—Ö
            if len(servers_data) < 50:
                js_servers = self._extract_via_javascript()
                for server in js_servers:
                    server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                    if server_key not in processed_servers:
                        servers_data.append(server)
                        processed_servers.add(server_key)
                
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript: {len(js_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers_data)}")
            return servers_data[:max_servers]
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []
    
    def _extract_from_table(self) -> list:
        """–ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        servers = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = []
            for selector in self.selectors['table_rows']:
                try:
                    found_rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if found_rows:
                        rows.extend(found_rows)
                        break
                except Exception:
                    continue
            
            if not rows:
                print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
            
            for i, row in enumerate(rows[:200]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                try:
                    if not row.is_displayed():
                        continue
                    
                    server_data = self._extract_server_from_row(row, i)
                    if server_data and server_data.get('name'):
                        servers.append(server_data)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            return servers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    def _extract_server_from_row(self, row, row_index: int) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            row_text = row.text.strip()
            if not row_text or 'loading' in row_text.lower():
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
            cells = row.find_elements(By.TAG_NAME, "td")
            if not cells:
                return None
            
            server_data = {
                'name': '',
                'ip': '',
                'protocol': 'DNSCrypt',
                'row_index': row_index,
                'extraction_method': 'table_direct'
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ (–æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            if len(cells) > 0:
                first_cell = cells[0]
                cell_text = first_cell.text.strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
                name_match = None
                for pattern in self.data_patterns['server_name']:
                    match = re.search(pattern, cell_text)
                    if match:
                        name_match = match.group(1).strip()
                        break
                
                if name_match:
                    server_data['name'] = name_match
                elif cell_text and len(cell_text) < 100:  # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è
                    server_data['name'] = cell_text
            
            # –ò—â–µ–º IP –∞–¥—Ä–µ—Å –≤–æ –≤—Å–µ—Ö —è—á–µ–π–∫–∞—Ö
            for cell in cells:
                cell_text = cell.text.strip()
                for pattern in self.data_patterns['ip_address']:
                    match = re.search(pattern, cell_text)
                    if match:
                        ip = match.group(1).strip()
                        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è IP
                        ip_parts = ip.split('.')
                        if len(ip_parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in ip_parts):
                            server_data['ip'] = ip
                            break
                if server_data['ip']:
                    break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            full_row_text = row_text.lower()
            if 'doh' in full_row_text or 'dns-over-https' in full_row_text:
                server_data['protocol'] = 'DoH'
            elif 'dot' in full_row_text or 'dns-over-tls' in full_row_text:
                server_data['protocol'] = 'DoT'
            elif 'relay' in full_row_text:
                server_data['protocol'] = 'DNSCrypt relay'
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç
            if not server_data['name'] and row_text:
                clean_text = row_text.split('\n')[0].strip()
                if clean_text and len(clean_text) < 50:
                    server_data['name'] = clean_text
            
            return server_data if server_data['name'] else None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}: {e}")
            return None
    
    def _extract_via_dialogs(self, max_count: int = 100) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤"""
        servers = []
        
        try:
            print("üîç –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏...")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤
            triggers = []
            for selector in self.selectors['dialog_triggers']:
                try:
                    found_triggers = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    triggers.extend(found_triggers)
                except Exception:
                    continue
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(triggers)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
            
            for i, trigger in enumerate(triggers[:max_count]):
                try:
                    if not trigger.is_displayed():
                        continue
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
                    server_data = self._extract_from_trigger(trigger, i)
                    if server_data:
                        servers.append(server_data)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if i > 0 and i % 20 == 0:
                        time.sleep(1)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º {i}: {e}")
                    continue
            
            return servers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏: {e}")
            return []
    
    def _extract_from_trigger(self, trigger, index: int) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView(true);", trigger)
            time.sleep(0.5)
            
            # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
            actions = ActionChains(self.driver)
            actions.move_to_element(trigger).click().perform()
            time.sleep(1)

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            dialog_element = self._wait_for_dialog()
            if not dialog_element:
                self._close_dialog_if_present()
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            dialog_text = self._get_dialog_text(dialog_element)
            if not dialog_text:
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {index}")
                self._close_dialog_if_present()
                return None
            
            print(f"   üìÑ –î–∏–∞–ª–æ–≥ –ø–æ–ª—É—á–µ–Ω, {len(dialog_text)} —Å–∏–º–≤–æ–ª–æ–≤.")

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            server_data = self._parse_dialog_text(dialog_text, index)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            self._close_dialog_if_present()

            return server_data

        except (NoSuchElementException, TimeoutException, WebDriverException) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ {index}: {e}")
            self._close_dialog_if_present()
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º {index}: {e}")
            self._close_dialog_if_present()
            return None

    def _wait_for_dialog(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        combined_selector = ", ".join(self.selectors['dialogs'])
        try:
            return WebDriverWait(self.driver, 5).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, combined_selector))
            )
        except TimeoutException:
            return None

    def _get_dialog_text(self, dialog_element) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏."""
        text = ""
        try:
            # Strategy 1: Standard .text attribute
            text = dialog_element.text.strip()
            if text:
                return text

            # Strategy 2: textContent via JavaScript
            text = self.driver.execute_script("return arguments[0].textContent;", dialog_element).strip()
            if text:
                return text

            # Strategy 3: innerText via JavaScript
            text = self.driver.execute_script("return arguments[0].innerText;", dialog_element).strip()
            if text:
                return text

            # Strategy 4: innerHTML via JavaScript (less clean, but sometimes necessary)
            html = self.driver.execute_script("return arguments[0].innerHTML;", dialog_element)
            # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML
            clean_html = re.sub('<[^<]+?>', ' ', html)
            text = ' '.join(clean_html.split()).strip()
            if text:
                return text
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        return text

    def _parse_dialog_text(self, text: str, index: int) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ (v2.1, legacy compatible)"""
        server_data = {
            'name': '',
            'ip': None,
            'protocol': None,
            'dnssec': False,
            'no_filters': False,
            'no_logs': False,
            'row_index': index,
            'extraction_method': 'dialog'
        }

        if not text:
            return server_data

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        for pattern in self.data_patterns['server_name']:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                server_data['name'] = match.group(1).strip()
                break
        
        # –ò—â–µ–º IP –∞–¥—Ä–µ—Å (–ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞)
        ip_patterns = [
            r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
            r'Address[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
            r'IP[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        ]
        for pattern in ip_patterns:
            matches = re.findall(pattern, text)
            for ip in matches:
                octets = ip.split('.')
                if all(0 <= int(octet) <= 255 for octet in octets):
                    server_data['ip'] = ip
                    break
            if server_data['ip']:
                break

        # –ò—â–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        if 'DNSCrypt relay' in text:
            server_data['protocol'] = 'DNSCrypt relay'
        elif 'DNSCrypt' in text:
            server_data['protocol'] = 'DNSCrypt'
        elif 'DoH' in text or 'DNS-over-HTTPS' in text:
            server_data['protocol'] = 'DoH'
        elif 'DoT' in text or 'DNS-over-TLS' in text:
            server_data['protocol'] = 'DoT'

        # –ò—â–µ–º —Ñ–ª–∞–≥–∏
        text_lower = text.lower()
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤
        server_data['dnssec'] = 'dnssec' in text_lower and 'true' in text_lower
        server_data['no_filters'] = ('no filter' in text_lower or 'no filtering' in text_lower) and 'true' in text_lower
        server_data['no_logs'] = ('no log' in text_lower or 'no logging' in text_lower) and 'true' in text_lower

        return server_data if server_data['name'] and server_data['ip'] else None

    def _close_dialog_if_present(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
        for selector in self.selectors['dialog_close']:
            try:
                close_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                if close_button.is_displayed():
                    actions = ActionChains(self.driver)
                    actions.move_to_element(close_button).click().perform()
                    time.sleep(0.5)
                    return
            except (NoSuchElementException, WebDriverException):
                continue
        # Fallback: click outside if no close button found
        try:
            actions = ActionChains(self.driver)
            actions.move_by_offset(10, 10).click().perform()
            time.sleep(0.5)
        except Exception:
            pass

    def _extract_via_javascript(self) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Vue.js –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ JavaScript"""
        print("üîç –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JavaScript...")
        servers = []
        try:
            # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ `items` –∏–ª–∏ `servers`
            # –∫–æ—Ä–Ω–µ–≤–æ–≥–æ Vue-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –ï–≥–æ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
            script = """
            const app = document.querySelector('#app') || document.body;
            if (app && app.__vue__) {
                const vueInstance = app.__vue__;
                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                const dataSources = [
                    vueInstance.servers,
                    vueInstance.items,
                    vueInstance.$data.servers,
                    vueInstance.$data.items,
                    vueInstance.$children[0].servers,
                    vueInstance.$children[0].items
                ];
                for (const source of dataSources) {
                    if (source && Array.isArray(source) && source.length > 0) {
                        return source;
                    }
                }
            }
            return [];
            """
            raw_servers = self.driver.execute_script(script)
            
            for i, item in enumerate(raw_servers):
                if isinstance(item, dict):
                    server_data = {
                        'name': item.get('name', item.get('server', '')),
                        'ip': item.get('ip', item.get('address', '')),
                        'protocol': item.get('protocol', 'DNSCrypt'),
                        'row_index': i,
                        'extraction_method': 'javascript'
                    }
                    if server_data['name']:
                        servers.append(server_data)

            return servers
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return []

    def extract_server_info_smart(self, row, server_name):
        """
        –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
        """
        try:
            print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ: {server_name}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            server_data = self._extract_server_from_row(row, server_name)
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            if not server_data or not server_data.get('ip'):
                print(f"   üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥...")
                dialog_data = self._try_extract_via_row_dialog(row, server_name)
                if dialog_data:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    if server_data:
                        server_data.update(dialog_data)
                    else:
                        server_data = dialog_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if server_data:
                server_data = self._normalize_server_data(server_data, server_name)
                if server_data.get('ip'):
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {server_data.get('name', 'N/A')} -> {server_data.get('ip', 'N/A')}")
                else:
                    print(f"   ‚ö†Ô∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è, –Ω–æ –Ω–µ IP: {server_data.get('name', 'N/A')}")
                return server_data
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {server_name}: {e}")
            return None
    
    def _try_extract_via_row_dialog(self, row, server_name):
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
            clickable_elements = []
            
            for selector in self.selectors['dialog_triggers']:
                try:
                    elements = row.find_elements(By.CSS_SELECTOR, selector)
                    clickable_elements.extend(elements)
                except Exception:
                    continue
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–µ
            if not clickable_elements:
                clickable_elements = [row]
            
            for element in clickable_elements[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏
                try:
                    # –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", element)
                    time.sleep(0.5)
                    
                    # –ö–ª–∏–∫–∞–µ–º
                    if element.is_displayed() and element.is_enabled():
                        ActionChains(self.driver).move_to_element(element).click().perform()
                        time.sleep(1)
                        
                        # –ñ–¥–µ–º –¥–∏–∞–ª–æ–≥
                        dialog_element = self._wait_for_dialog()
                        if dialog_element:
                            dialog_text = self._get_dialog_text(dialog_element)
                            self._close_dialog_if_present()
                            
                            if dialog_text:
                                print(f"      üìÑ –î–∏–∞–ª–æ–≥ –¥–ª—è '{server_name}' –ø–æ–ª—É—á–µ–Ω, {len(dialog_text)} —Å–∏–º–≤–æ–ª–æ–≤.")
                                return self._parse_dialog_text(dialog_text, server_name)
                            else:
                                print(f"      ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è '{server_name}'.")
                    
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞/–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
                    continue
            
            return None
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥: {e}")
            return None
    
    def _normalize_server_data(self, server_data, original_name):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        if not server_data:
            return None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
        if not server_data.get('name') and original_name:
            server_data['name'] = original_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
        ip = server_data.get('ip', '')
        if ip:
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è IP
            ip_parts = ip.split('.')
            if len(ip_parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in ip_parts):
                server_data['ip'] = ip
            else:
                # –ï—Å–ª–∏ IP –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
                server_data['ip'] = ''
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not server_data.get('protocol'):
            server_data['protocol'] = 'DNSCrypt'
        
        return server_data