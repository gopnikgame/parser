"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù –¥–ª—è Vue.js v2.1
"""
import time
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from selenium.webdriver.common.action_chains import ActionChains

class DialogExtractor:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1 –¥–ª—è Vue.js"""
    
    def __init__(self, driver: webdriver.Chrome):
        self.driver = driver
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Vue.js/Vuetify –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.selectors = {
            # –ö–Ω–æ–ø–∫–∏ –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_triggers': [
                'button[data-testid*="dialog"]',
                '.v-btn[aria-haspopup="dialog"]',
                'button[aria-label*="info" i]',
                'button[aria-label*="detail" i]',
                'button[title*="info" i]',
                'button[title*="detail" i]',
                '.v-btn[data-action="show-details"]',
                '.server-info-btn',
                '.details-btn',
                'button.info-button',
                '[role="button"][aria-describedby]',
                '.v-data-table__expand-icon',
                '.expand-btn'
            ],
            
            # –î–∏–∞–ª–æ–≥–∏ –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            'dialogs': [
                '.v-dialog',
                '.v-overlay__content',
                '.v-menu__content',
                '.modal',
                '.dialog',
                '[role="dialog"]',
                '.v-card[aria-modal="true"]',
                '.popup',
                '.overlay'
            ],
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_content': [
                '.v-dialog .v-card-text',
                '.v-dialog .v-card__text',
                '.v-overlay__content .v-card-text',
                '.v-menu__content .v-list',
                '.modal-body',
                '.dialog-content',
                '.popup-content'
            ],
            
            # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            'table_rows': [
                '.v-data-table tbody tr',
                '.v-datatable tbody tr',
                'table tbody tr',
                '.data-table tbody tr',
                'tr[data-item]',
                'tr[class*="row"]'
            ],
            
            # –Ø—á–µ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            'server_cells': [
                'td[data-label*="server" i]',
                'td[data-field*="name" i]',
                'td.server-name',
                'td.name-cell',
                'td:first-child',
                'td[class*="name"]'
            ],
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            'dialog_close': [
                '.v-dialog .v-btn[aria-label*="close" i]',
                '.v-overlay .v-btn[data-dismiss]',
                '.v-dialog .v-icon[aria-label*="close" i]',
                '.modal .close',
                '.dialog .close-btn',
                '[aria-label="Close"]',
                '.v-overlay__scrim'
            ]
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_patterns = {
            'server_name': [
                r'Server:\s*([^\n\r]+)',
                r'Name:\s*([^\n\r]+)',
                r'Hostname:\s*([^\n\r]+)',
                r'^([a-zA-Z0-9\-_.]+)(?:\s|$)',
                r'([a-zA-Z0-9\-_.]+\.(?:com|org|net|info|io|me|co))',
            ],
            'ip_address': [
                r'IP:\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
                r'Address:\s*([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
                r'([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',
            ],
            'protocol': [
                r'Protocol:\s*(DNSCrypt|DoH|DoT)',
                r'Type:\s*(DNSCrypt|DoH|DoT)',
                r'(DNSCrypt|DNS-over-HTTPS|DNS-over-TLS)',
            ]
        }
    
    def extract_all_servers(self, max_servers: int = 200) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v2.1)...")
        
        servers_data = []
        processed_servers = set()
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            table_servers = self._extract_from_table()
            for server in table_servers:
                server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                if server_key not in processed_servers:
                    servers_data.append(server)
                    processed_servers.add(server_key)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {len(table_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏/–ø–æ–ø–∞–ø—ã
            if len(servers_data) < 50:  # –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –¥–∏–∞–ª–æ–≥–∏
                dialog_servers = self._extract_via_dialogs(max_servers - len(servers_data))
                for server in dialog_servers:
                    server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                    if server_key not in processed_servers:
                        servers_data.append(server)
                        processed_servers.add(server_key)
                
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏: {len(dialog_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ú–µ—Ç–æ–¥ 3: JavaScript –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ Vue –¥–∞–Ω–Ω—ã—Ö
            if len(servers_data) < 50:
                js_servers = self._extract_via_javascript()
                for server in js_servers:
                    server_key = f"{server.get('name', '')}_{server.get('ip', '')}"
                    if server_key not in processed_servers:
                        servers_data.append(server)
                        processed_servers.add(server_key)
                
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript: {len(js_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers_data)}")
            return servers_data[:max_servers]
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []
    
    def _extract_from_table(self) -> list:
        """–ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        servers = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = []
            for selector in self.selectors['table_rows']:
                try:
                    found_rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if found_rows:
                        rows.extend(found_rows)
                        break
                except:
                    continue
            
            if not rows:
                print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
            
            for i, row in enumerate(rows[:200]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                try:
                    if not row.is_displayed():
                        continue
                    
                    server_data = self._extract_server_from_row(row, i)
                    if server_data and server_data.get('name'):
                        servers.append(server_data)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            return servers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    def _extract_server_from_row(self, row, row_index: int) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            row_text = row.text.strip()
            if not row_text or 'loading' in row_text.lower():
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
            cells = row.find_elements(By.TAG_NAME, "td")
            if not cells:
                return None
            
            server_data = {
                'name': '',
                'ip': '',
                'protocol': 'DNSCrypt',
                'row_index': row_index,
                'extraction_method': 'table_direct'
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ (–æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            if len(cells) > 0:
                first_cell = cells[0]
                cell_text = first_cell.text.strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
                name_match = None
                for pattern in self.data_patterns['server_name']:
                    match = re.search(pattern, cell_text)
                    if match:
                        name_match = match.group(1).strip()
                        break
                
                if name_match:
                    server_data['name'] = name_match
                elif cell_text and len(cell_text) < 100:  # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è
                    server_data['name'] = cell_text
            
            # –ò—â–µ–º IP –∞–¥—Ä–µ—Å –≤–æ –≤—Å–µ—Ö —è—á–µ–π–∫–∞—Ö
            for cell in cells:
                cell_text = cell.text.strip()
                for pattern in self.data_patterns['ip_address']:
                    match = re.search(pattern, cell_text)
                    if match:
                        server_data['ip'] = match.group(1)
                        break
                if server_data['ip']:
                    break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            full_row_text = row_text.lower()
            if 'doh' in full_row_text or 'dns-over-https' in full_row_text:
                server_data['protocol'] = 'DoH'
            elif 'dot' in full_row_text or 'dns-over-tls' in full_row_text:
                server_data['protocol'] = 'DoT'
            elif 'relay' in full_row_text:
                server_data['protocol'] = 'DNSCrypt relay'
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç
            if not server_data['name'] and row_text:
                clean_text = row_text.split('\n')[0].strip()
                if clean_text and len(clean_text) < 50:
                    server_data['name'] = clean_text
            
            return server_data if server_data['name'] else None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}: {e}")
            return None
    
    def _extract_via_dialogs(self, max_count: int = 100) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤"""
        servers = []
        
        try:
            print("üîç –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏...")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤
            triggers = []
            for selector in self.selectors['dialog_triggers']:
                try:
                    found_triggers = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    triggers.extend(found_triggers)
                except:
                    continue
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(triggers)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
            
            for i, trigger in enumerate(triggers[:max_count]):
                try:
                    if not trigger.is_displayed():
                        continue
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
                    server_data = self._extract_from_trigger(trigger, i)
                    if server_data:
                        servers.append(server_data)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if i > 0 and i % 20 == 0:
                        time.sleep(1)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º {i}: {e}")
                    continue
            
            return servers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏: {e}")
            return []
    
    def _extract_from_trigger(self, trigger, index: int) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView(true);", trigger)
            time.sleep(0.5)
            
            # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
            actions = ActionChains(self.driver)
            actions.move_to_element(trigger).click().perform()
            time.sleep(1)
            