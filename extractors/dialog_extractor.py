# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, WebDriverException
from typing import Optional, Dict, Any, List
from ..core.config import ParserConfig

class AdvancedDialogExtractor:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
        self.extraction_stats = {
            'attempts': 0,
            'successes': 0,
            'timeouts': 0,
            'click_failures': 0,
            'dialog_failures': 0
        }
    
    def extract_server_info_smart(self, row, server_name: str, retry_count: int = None) -> Optional[Dict[str, Any]]:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if retry_count is None:
            retry_count = self.config.MAX_RETRIES
            
        self.extraction_stats['attempts'] += 1
        
        for attempt in range(retry_count):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count} –¥–ª—è {server_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
                if not self._ensure_row_visible(row):
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç  
                clickable_element = self._find_clickable_element(row)
                if not clickable_element:
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—ã–π –∫–ª–∏–∫
                if not self._smart_click(clickable_element, attempt):
                    continue
                
                # –ò—â–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
                dialog_content = self._extract_dialog_content()
                if dialog_content:
                    self._close_dialog()
                    
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    info = self._parse_server_info(dialog_content, server_name)
                    if info and info.get('ip'):
                        self.extraction_stats['successes'] += 1
                        return info
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –¥–µ–ª–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                delay = self.config.RETRY_DELAY_BASE * (2 ** attempt) + random.uniform(0.5, 1.5)
                time.sleep(delay)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –¥–ª—è {server_name}: {e}")
                if attempt < retry_count - 1:
                    time.sleep(self.config.RETRY_DELAY_BASE * (attempt + 1))
        
        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {server_name}")
        return None
    
    def _ensure_row_visible(self, row) -> bool:
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if not row.is_displayed():
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                self.driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", 
                    row
                )
                time.sleep(random.uniform(1, 2))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if not row.is_displayed():
                    return False
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: {e}")
            return False
    
    def _find_clickable_element(self, row):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        try:
            cells = row.find_elements(By.TAG_NAME, "td")
            if len(cells) < 1:
                return None
            
            name_cell = cells[0]
            server_name = name_cell.text.strip()
            
            if not server_name or server_name in ["No data available", "loading"]:
                return None
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            click_strategies = [
                # Vuetify –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, ".v-btn"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "[role='button']"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, ".v-chip"),
                
                # HTML —ç–ª–µ–º–µ–Ω—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, "span[title]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "span"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "a"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "button"),
                
                # –ê—Ç—Ä–∏–±—É—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[onclick]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[data-toggle]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[aria-expanded]"),
                
                # Fallback - —Å–∞–º–∞ —è—á–µ–π–∫–∞
                lambda: name_cell
            ]
            
            for strategy in click_strategies:
                try:
                    element = strategy()
                    if element and element.is_displayed():
                        return element
                except:
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _smart_click(self, element, attempt: int = 0) -> bool:
        """–£–º–Ω—ã–π –∫–ª–∏–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            delay_range = self.config.get_click_delay()
            time.sleep(random.uniform(*delay_range))
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–ª–∏–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            click_methods = [
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏
                lambda: self._human_like_click(element),
                
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Selenium –∫–ª–∏–∫
                lambda: element.click(),
                
                # ActionChains –∫–ª–∏–∫
                lambda: ActionChains(self.driver).move_to_element(element).click().perform(),
                
                # JavaScript –∫–ª–∏–∫
                lambda: self.driver.execute_script("arguments[0].click();", element),
                
                # –ö–ª–∏–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                lambda: self._click_with_offset(element),
                
                # –ö–ª–∏–∫ —á–µ—Ä–µ–∑ Enter
                lambda: element.send_keys(Keys.ENTER),
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π JavaScript
                lambda: self.driver.execute_script("""
                    arguments[0].dispatchEvent(new MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true
                    }));
                """, element)
            ]
            
            for i, click_method in enumerate(click_methods):
                try:
                    click_method()
                    
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    wait_time = 2 + (attempt * 0.5) + (i * 0.5)
                    time.sleep(wait_time)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                    if self._check_dialog_appeared():
                        return True
                        
                except Exception as e:
                    continue
            
            self.extraction_stats['click_failures'] += 1
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
            return False
    
    def _human_like_click(self, element):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏"""
        actions = ActionChains(self.driver)
        
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        offset_x = random.randint(-3, 3)
        offset_y = random.randint(-3, 3)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø–∞—É–∑–æ–π
        actions.move_to_element(element)
        actions.pause(random.uniform(0.1, 0.3))
        
        # –ö–ª–∏–∫ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
        actions.move_to_element_with_offset(element, offset_x, offset_y)
        actions.pause(random.uniform(0.05, 0.15))
        actions.click()
        
        actions.perform()
    
    def _click_with_offset(self, element):
        """–ö–ª–∏–∫ —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º"""
        actions = ActionChains(self.driver)
        offset_x = random.randint(-2, 2)
        offset_y = random.randint(-2, 2)
        actions.move_to_element_with_offset(element, offset_x, offset_y).click().perform()
    
    def _check_dialog_appeared(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        for selector in self.config.DIALOG_SELECTORS[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            try:
                if selector.startswith("//"):
                    elements = self.driver.find_elements(By.XPATH, selector)
                else:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                
                for element in elements:
                    if element.is_displayed() and element.text.strip():
                        return True
            except:
                continue
        
        return False
    
    def _extract_dialog_content(self) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            wait = WebDriverWait(self.driver, self.config.DIALOG_WAIT_TIMEOUT)
            
            for selector in self.config.DIALOG_SELECTORS:
                try:
                    if selector.startswith("//"):
                        dialog = wait.until(
                            EC.presence_of_element_located((By.XPATH, selector))
                        )
                    else:
                        dialog = wait.until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                    
                    if dialog and dialog.is_displayed():
                        content = dialog.text.strip()
                        if content and len(content) > 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            return content
                            
                except TimeoutException:
                    continue
                except Exception as e:
                    continue
            
            self.extraction_stats['dialog_failures'] += 1
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    def _close_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        close_methods = [
            # ESC –∫–ª—é—á
            lambda: self.driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE),
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            lambda: self._find_and_click_close_button(),
            
            # –ö–ª–∏–∫ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
            lambda: self._click_outside_dialog(),
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ JavaScript
            lambda: self._force_hide_dialogs()
        ]
        
        for close_method in close_methods:
            try:
                close_method()
                time.sleep(0.5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥
                if not self._check_dialog_appeared():
                    break
                    
            except:
                continue
    
    def _find_and_click_close_button(self):
        """–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        close_selectors = [
            "button[aria-label*='close']",
            "button[aria-label*='Close']", 
            ".v-btn--icon[aria-label*='close']",
            ".v-dialog__close",
            ".close-btn",
            ".modal-close",
            "button.close",
            "[data-dismiss='modal']"
        ]
        
        for selector in close_selectors:
            try:
                close_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                if close_btn.is_displayed():
                    close_btn.click()
                    return
            except:
                continue
    
    def _click_outside_dialog(self):
        """–ö–ª–∏–∫ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            # –ö–ª–∏–∫–∞–µ–º –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            actions = ActionChains(self.driver)
            actions.move_by_offset(10, 10).click().perform()
        except:
            pass
    
    def _force_hide_dialogs(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            self.driver.execute_script("""
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
                var dialogs = document.querySelectorAll('.v-dialog, .v-menu, .modal, .popup');
                dialogs.forEach(function(dialog) {
                    dialog.style.display = 'none';
                    dialog.style.visibility = 'hidden';
                });
                
                // –£–¥–∞–ª—è–µ–º overlay
                var overlays = document.querySelectorAll('.v-overlay, .modal-backdrop');
                overlays.forEach(function(overlay) {
                    overlay.remove();
                });
            """)
        except:
            pass
    
    def _parse_server_info(self, dialog_text: str, server_name: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        import re
        
        info = {
            'name': server_name,
            'ip': None,
            'protocol': None,
            'dnssec': False,
            'no_filters': False,
            'no_logs': False
        }
        
        if not dialog_text:
            return info
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ IP
        ip_patterns = [
            r'(?:Address|IP|Server)[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
            r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',
            r'(?:IPv4)[^:]*:?\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        ]
        
        # –ü–æ–∏—Å–∫ IP –∞–¥—Ä–µ—Å–∞
        for pattern in ip_patterns:
            matches = re.findall(pattern, dialog_text, re.IGNORECASE)
            for ip in matches:
                if self._validate_ip(ip):
                    info['ip'] = ip
                    break
            if info['ip']:
                break
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        text_lower = dialog_text.lower()
        if 'dnscrypt relay' in text_lower or 'anonymized dns relay' in text_lower:
            info['protocol'] = 'DNSCrypt relay'
        elif 'dnscrypt' in text_lower and 'doh' not in text_lower:
            info['protocol'] = 'DNSCrypt'
        elif 'doh' in text_lower or 'dns-over-https' in text_lower:
            info['protocol'] = 'DoH'
        elif 'dot' in text_lower or 'dns-over-tls' in text_lower:
            info['protocol'] = 'DoT'
        
        # –ü–æ–∏—Å–∫ —Ñ–ª–∞–≥–æ–≤ —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        info['dnssec'] = bool(re.search(r'dnssec[^:]*:?\s*(true|yes|‚úì|enabled)', text_lower))
        info['no_filters'] = bool(re.search(r'no.?filter[^:]*:?\s*(true|yes|‚úì|enabled)', text_lower))
        info['no_logs'] = bool(re.search(r'no.?log[^:]*:?\s*(true|yes|‚úì|enabled)', text_lower))
        
        return info
    
    def _validate_ip(self, ip: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞"""
        try:
            parts = ip.split('.')
            if len(parts) != 4:
                return False
            
            for part in parts:
                num = int(part)
                if not (0 <= num <= 255):
                    return False
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            first_octet = int(parts[0])
            if first_octet in [0, 10, 127] or (first_octet == 172 and 16 <= int(parts[1]) <= 31) or (first_octet == 192 and int(parts[1]) == 168):
                return False
                
            return True
            
        except (ValueError, IndexError):
            return False
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        return self.extraction_stats.copy()