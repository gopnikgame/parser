# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, WebDriverException
from typing import Optional, Dict, Any, List

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
from core.config import ParserConfig

class AdvancedDialogExtractor:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, driver: webdriver.Chrome, config: ParserConfig):
        self.driver = driver
        self.config = config
        self.extraction_stats = {
            'attempts': 0,
            'successes': 0,
            'timeouts': 0,
            'click_failures': 0,
            'dialog_failures': 0
        }
    
    def extract_server_info_smart(self, row, server_name: str, retry_count: int = None) -> Optional[Dict[str, Any]]:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if retry_count is None:
            retry_count = self.config.MAX_RETRIES
            
        self.extraction_stats['attempts'] += 1
        
        for attempt in range(retry_count):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count} –¥–ª—è {server_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
                if not self._ensure_row_visible(row):
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç  
                clickable_element = self._find_clickable_element(row)
                if not clickable_element:
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—ã–π –∫–ª–∏–∫
                if not self._smart_click(clickable_element, attempt):
                    continue
                
                # –ò—â–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
                dialog_content = self._extract_dialog_content()
                if dialog_content:
                    self._close_dialog()
                    
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    info = self._parse_server_info(dialog_content, server_name)
                    if info and info.get('ip'):
                        self.extraction_stats['successes'] += 1
                        return info
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –¥–µ–ª–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                delay = self.config.RETRY_DELAY_BASE * (2 ** attempt) + random.uniform(0.5, 1.5)
                time.sleep(delay)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –¥–ª—è {server_name}: {e}")
                if attempt < retry_count - 1:
                    time.sleep(self.config.RETRY_DELAY_BASE * (attempt + 1))
        
        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {server_name}")
        return None
    
    def _ensure_row_visible(self, row) -> bool:
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if not row.is_displayed():
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                self.driver.execute_script(
                    "arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", 
                    row
                )
                time.sleep(random.uniform(1, 2))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if not row.is_displayed():
                    return False
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: {e}")
            return False
    
    def _find_clickable_element(self, row):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        try:
            cells = row.find_elements(By.TAG_NAME, "td")
            if len(cells) < 1:
                return None
            
            name_cell = cells[0]
            server_name = name_cell.text.strip()
            
            if not server_name or server_name in ["No data available", "loading"]:
                return None
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            click_strategies = [
                # Vuetify –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, ".v-btn"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "[role='button']"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, ".v-chip"),
                
                # HTML —ç–ª–µ–º–µ–Ω—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, "span[title]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "span"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "a"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "button"),
                
                # –ê—Ç—Ä–∏–±—É—Ç—ã
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[onclick]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[data-toggle]"),
                lambda: name_cell.find_element(By.CSS_SELECTOR, "*[aria-expanded]"),
                
                # Fallback - —Å–∞–º–∞ —è—á–µ–π–∫–∞
                lambda: name_cell
            ]
            
            for strategy in click_strategies:
                try:
                    element = strategy()
                    if element and element.is_displayed():
                        return element
                except:
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _smart_click(self, element, attempt: int = 0) -> bool:
        """–£–º–Ω—ã–π –∫–ª–∏–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            delay_range = self.config.get_click_delay()
            time.sleep(random.uniform(*delay_range))
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–ª–∏–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            click_methods = [
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏
                lambda: self._human_like_click(element),
                
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Selenium –∫–ª–∏–∫
                lambda: element.click(),
                
                # ActionChains –∫–ª–∏–∫
                lambda: ActionChains(self.driver).move_to_element(element).click().perform(),
                
                # JavaScript –∫–ª–∏–∫
                lambda: self.driver.execute_script("arguments[0].click();", element),
                
                # –ö–ª–∏–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                lambda: self._click_with_offset(element),
                
                # –ö–ª–∏–∫ —á–µ—Ä–µ–∑ Enter
                lambda: element.send_keys(Keys.ENTER),
                
               