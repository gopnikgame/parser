# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
import time
import random
import os
import sys
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from core.config import ParserConfig
from core.driver_manager import SmartDriverManager
from extractors.dialog_extractor import AdvancedDialogExtractor
from strategies.error_recovery import SmartErrorRecovery
from utils.metrics import ParsingMetrics, ParsingCache

# –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
import re
import subprocess
import urllib.request
import requests
import base64
import json
import psutil
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class EnhancedDNSCryptParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä DNSCrypt —Å 100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self):
        self.config = ParserConfig.from_env()
        self.driver_manager = SmartDriverManager(self.config)
        self.driver = None
        self.dialog_extractor = None
        self.error_recovery = None
        self.metrics = ParsingMetrics()
        self.cache = ParsingCache()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        self.session_stats = {
            'total_processed': 0,
            'successful': 0,
            'failed': 0,
            'cache_hits': 0,
            'recovery_attempts': 0
        }
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ DNSCrypt –ø–∞—Ä—Å–µ—Ä–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = self.driver_manager.create_stealth_driver()
            if not self.driver:
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            self.dialog_extractor = AdvancedDialogExtractor(self.driver, self.config)
            self.error_recovery = SmartErrorRecovery(self.driver, self.config)
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
            self.cache.clear_expired_cache()
            
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def parse_servers_enhanced(self, target_servers: List[Dict]) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é"""
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –º–µ—Ç—Ä–∏–∫
            session_id = self.metrics.start_session()
            
            print(f"üéØ –ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not self._navigate_to_page():
                return self._create_error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            if not self._setup_pagination():
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
            all_rows = self._get_server_rows_enhanced()
            if not all_rows:
                return self._create_error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
            results = self._process_servers_smart(target_servers, all_rows)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –º–µ—Ç—Ä–∏–∫
            session = self.metrics.end_session()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            detailed_report = self.metrics.generate_detailed_report()
            print(detailed_report)
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return self._create_error_result(str(e))
    
    def _navigate_to_page(self) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        url = "https://dnscrypt.info/public-servers"
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                
                self.driver.get(url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–º–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
                if self._wait_for_page_load_smart():
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    return True
                else:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
                if not self.error_recovery.handle_error(e, "page_navigation"):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                    
                time.sleep(5 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return False
    
    def _wait_for_page_load_smart(self, timeout: int = 120) -> bool:
        """–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            wait = WebDriverWait(self.driver, timeout)
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            wait.until(EC.presence_of_element_located((By.TAG_NAME, "table")))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for _ in range(30):  # –ú–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫
                try:
                    network_idle = self.driver.execute_script("""
                        return window.performance.getEntriesByType('resource')
                            .filter(r => r.responseEnd === 0).length === 0;
                    """)
                    
                    if network_idle:
                        break
                        
                except:
                    pass
                
                time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            data_rows = self.driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
            visible_rows = [row for row in data_rows if row.is_displayed() and row.text.strip()]
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(visible_rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            return len(visible_rows) > 50  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 50 —Å–µ—Ä–≤–µ—Ä–æ–≤
            
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def _setup_pagination(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        strategies = [
            self._try_vuetify3_pagination,
            self._try_vuetify2_pagination,
            self._try_generic_pagination,
            self._try_javascript_pagination
        ]
        
        for strategy in strategies:
            try:
                if strategy():
                    print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    time.sleep(5)
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
        return False
    
    def _try_vuetify3_pagination(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vuetify 3.x –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        selectors = [
            ".v-data-table__footer .v-select",
            ".v-table__footer .v-select"
        ]
        
        for selector in selectors:
            try:
                dropdown = self.driver.find_element(By.CSS_SELECTOR, selector)
                if dropdown.is_displayed():
                    return self._click_pagination_dropdown(dropdown)
            except:
                continue
        
        return False
    
    def _try_vuetify2_pagination(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vuetify 2.x –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        selectors = [
            ".v-datatable__actions .v-select",
            ".v-data-table-footer .v-select"
        ]
        
        for selector in selectors:
            try:
                dropdown = self.driver.find_element(By.CSS_SELECTOR, selector)
                if dropdown.is_displayed():
                    return self._click_pagination_dropdown(dropdown)
            except:
                continue
        
        return False
    
    def _try_generic_pagination(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        selectors = [
            "select[aria-label*='per page']",
            "select[aria-label*='rows']",
            ".per-page-select",
            ".rows-per-page select"
        ]
        
        for selector in selectors:
            try:
                dropdown = self.driver.find_element(By.CSS_SELECTOR, selector)
                if dropdown.is_displayed():
                    return self._click_pagination_dropdown(dropdown)
            except:
                continue
        
        return False
    
    def _try_javascript_pagination(self) -> bool:
        """JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            self.driver.execute_script("""
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
                var app = document.querySelector('[data-app]');
                if (app && app.__vue__) {
                    var vm = app.__vue__;
                    if (vm.$data && vm.$data.itemsPerPage) {
                        vm.$data.itemsPerPage = -1;
                    }
                    if (vm.$data && vm.$data.pagination) {
                        vm.$data.pagination.rowsPerPage = -1;
                    }
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                var selects = document.querySelectorAll('select');
                selects.forEach(function(select) {
                    var options = select.options;
                    for (var i = options.length - 1; i >= 0; i--) {
                        if (options[i].value === '-1' || options[i].text.includes('All')) {
                            select.selectedIndex = i;
                            select.dispatchEvent(new Event('change'));
                            return true;
                        }
                    }
                });
            """)
            return True
        except:
            return False
    
    def _click_pagination_dropdown(self, dropdown) -> bool:
        """–ö–ª–∏–∫ –ø–æ dropdown –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä 'All'"""
        try:
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ dropdown
            ActionChains(self.driver).move_to_element(dropdown).click().perform()
            time.sleep(2)
            
            # –ò—â–µ–º –æ–ø—Ü–∏—é "All"
            all_options = [
                "//div[contains(@class, 'v-list__tile__title') and (text()='All' or text()='–í—Å–µ' or text()='-1')]",
                "//li[contains(text(), 'All') or contains(text(), '–í—Å–µ')]",
                "//option[contains(text(), 'All') or contains(text(), '–í—Å–µ') or @value='-1']",
                "//div[contains(@class, 'v-list-item__title') and (text()='All' or text()='–í—Å–µ')]"
            ]
            
            for option_xpath in all_options:
                try:
                    option = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, option_xpath))
                    )
                    option.click()
                    return True
                except:
                    continue
            
            return False
            
        except:
            return False
    
    def _get_server_rows_enhanced(self) -> List:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        print("üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-content
        self._scroll_to_load_content()
        
        all_rows = []
        found_selectors = []
        
        for selector in self.config.TABLE_ROW_SELECTORS:
            try:
                rows = self.driver.find_elements(By.CSS_SELECTOR, selector)
                valid_rows = self._filter_valid_rows(rows)
                
                if valid_rows:
                    print(f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(valid_rows)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
                    all_rows.extend(valid_rows)
                    found_selectors.append(selector)
                    
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_rows = self._remove_duplicate_rows(all_rows)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã: {found_selectors}")
        
        return unique_rows
    
    def _scroll_to_load_content(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        for i in range(5):
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(1, 3))
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(random.uniform(0.5, 1.5))
    
    def _filter_valid_rows(self, rows) -> List:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        valid_rows = []
        
        for row in rows:
            try:
                if not row.is_displayed():
                    continue
                
                text = row.text.strip()
                if not text or len(text) < 10:
                    continue
                
                if any(skip_text in text.lower() for skip_text in 
                       ["no data available", "loading", "please wait"]):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è—á–µ–µ–∫
                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    cells = row.find_elements(By.CSS_SELECTOR, "div[role='cell'], .cell")
                
                if len(cells) >= 2:
                    first_cell_text = cells[0].text.strip()
                    if first_cell_text and len(first_cell_text) > 2:
                        valid_rows.append(row)
                        
            except:
                continue
        
        return valid_rows
    
    def _remove_duplicate_rows(self, rows) -> List:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫"""
        unique_rows = []
        seen_texts = set()
        
        for row in rows:
            try:
                row_text = row.text.strip()[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                if row_text not in seen_texts and len(row_text) > 10:
                    seen_texts.add(row_text)
                    unique_rows.append(row)
            except:
                continue
        
        return unique_rows
    
    def _process_servers_smart(self, target_servers: List[Dict], all_rows: List) -> Dict[str, Any]:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        print(f"üéØ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        target_names = {server['name'] for server in target_servers}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        row_index = self._create_row_index(all_rows)
        
        servers_data = {}
        processed_count = 0
        
        for server in target_servers:
            server_name = server['name']
            processed_count += 1
            
            print(f"\n[{processed_count}/{len(target_servers)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {server_name}...")
            
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_info = self.cache.get_cached_server_info(server_name)
            if cached_info:
                servers_data[server_name] = cached_info
                self.session_stats['cache_hits'] += 1
                self.metrics.record_server_extraction(
                    server_name, True, 0.1, 1, 
                    extraction_method="cache"
                )
                print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –¥–ª—è {server_name}")
                continue
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            row = row_index.get(server_name)
            if not row:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {server_name}")
                self.metrics.record_server_extraction(
                    server_name, False, time.time() - start_time, 1,
                    error_type="row_not_found"
                )
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            try:
                info = self.dialog_extractor.extract_server_info_smart(row, server_name)
                
                duration = time.time() - start_time
                
                if info and info.get('ip'):
                    servers_data[server_name] = info
                    self.session_stats['successful'] += 1
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.cache.cache_server_info(server_name, info)
                    
                    self.metrics.record_server_extraction(
                        server_name, True, duration, 1,
                        extraction_method="dialog_extraction"
                    )
                    
                    print(f"‚úÖ {server_name} -> {info['ip']} ({info['protocol']})")
                else:
                    self.session_stats['failed'] += 1
                    self.metrics.record_server_extraction(
                        server_name, False, duration, 1,
                        error_type="extraction_failed"
                    )
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {server_name}")
                
            except Exception as e:
                self.session_stats['failed'] += 1
                duration = time.time() - start_time
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                if self.error_recovery.handle_error(e, f"server_extraction_{server_name}"):
                    self.session_stats['recovery_attempts'] += 1
                
                self.metrics.record_server_extraction(
                    server_name, False, duration, 1,
                    error_type=str(type(e).__name__)
                )
                
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {server_name}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            time.sleep(random.uniform(0.5, 2.0))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_processed = len(target_servers)
        successful = len(servers_data)
        success_rate = (successful / total_processed * 100) if total_processed > 0 else 0
        
        result = {
            'servers_data': servers_data,
            'total_processed': total_processed,
            'successful': successful,
            'failed': total_processed - successful,
            'success_rate': success_rate,
            'cache_hits': self.session_stats['cache_hits'],
            'recovery_attempts': self.session_stats['recovery_attempts']
        }
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"   –í—Å–µ–≥–æ: {total_processed}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {successful} ({success_rate:.1f}%)")
        print(f"   –ö—ç—à —Ö–∏—Ç—ã: {self.session_stats['cache_hits']}")
        print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {self.session_stats['recovery_attempts']}")
        
        return result
    
    def _create_row_index(self, all_rows: List) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        row_index = {}
        
        for row in all_rows:
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if len(cells) > 0:
                    server_name = cells[0].text.strip()
                    if server_name and len(server_name) > 2:
                        row_index[server_name] = row
            except:
                continue
        
        print(f"üìä –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è {len(row_index)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return row_index
    
    def _create_error_result(self, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        return {
            'servers_data': {},
            'total_processed': 0,
            'successful': 0,
            'failed': 0,
            'success_rate': 0,
            'error': error_message
        }
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver_manager:
            self.driver_manager.quit_driver()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.metrics:
            self.metrics.export_csv_report()
        
        print("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def enhanced_get_all_server_rows(driver):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    config = ParserConfig.from_env()
    parser = EnhancedDNSCryptParser()
    parser.driver = driver
    return parser._get_server_rows_enhanced()

def extract_server_info_from_row_enhanced(driver, row, server_name):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    config = ParserConfig.from_env()
    extractor = AdvancedDialogExtractor(driver, config)
    return extractor.extract_server_info_smart(row, server_name)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π main()
def enhanced_main():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = EnhancedDNSCryptParser()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not parser.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å GitHub...")
        
        config_github = get_github_config()
        github_urls = {
            'DNSCrypt_relay.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_relay.txt',
            'DNSCrypt_servers.txt': f'https://github.com/{config_github["owner"]}/{config_github["repo"]}/blob/{config_github["branch"]}/lib/DNSCrypt_servers.txt'
        }
        
        temp_files = []
        for filename, url in github_urls.items():
            temp_filename = f"temp_{filename}"
            if download_file(url, temp_filename):
                temp_files.append(temp_filename)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename}")
                return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤
        relay_servers = parse_config_file('temp_DNSCrypt_relay.txt')
        dnscrypt_servers = parse_config_file('temp_DNSCrypt_servers.txt')
        
        all_target_servers = relay_servers + dnscrypt_servers
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(all_target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        result = parser.parse_servers_enhanced(all_target_servers)
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result['error']}")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        servers_data = result['servers_data']
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
        relay_data = {name: info for name, info in servers_data.items() 
                     if info.get('protocol') == 'DNSCrypt relay'}
        server_data = {name: info for name, info in servers_data.items() 
                      if info.get('protocol') == 'DNSCrypt'}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        total_updated = 0
        
        if relay_data:
            print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–ª–µ–µ–≤...")
            os.rename('temp_DNSCrypt_relay.txt', 'DNSCrypt_relay.txt')
            updated_count = update_config_file('DNSCrypt_relay.txt', relay_data, is_relay_file=True)
            total_updated += updated_count
        
        if server_data:
            print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            os.rename('temp_DNSCrypt_servers.txt', 'DNSCrypt_servers.txt')
            updated_count = update_config_file('DNSCrypt_servers.txt', server_data, is_relay_file=False)
            total_updated += updated_count
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub
        if total_updated > 0:
            github_token = os.getenv('GITHUB_TOKEN')
            if github_token:
                print("üîë –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ GitHub...")
                push_to_github(total_updated)
            else:
                print("‚ö†Ô∏è GitHub token –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}%")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {result['successful']}/{result['total_processed']}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except:
                pass
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        parser.cleanup()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞—Ç—å
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        from core.config import ParserConfig
        print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt v2.0")
        enhanced_main()
    except ImportError:
        print("üöÄ –ó–∞–ø—É—Å–∫ –°–¢–ê–ù–î–ê–†–¢–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ DNSCrypt")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main()
        from parser import main
        main()